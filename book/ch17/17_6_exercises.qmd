---
title: "17.6 练习与作业"
---

### 1. 概念辨析：工作流状态 vs. 强化学习状态

请用你自己的话，解释我们在本章 `LangGraph` 中构建的“State”（状态）和我们在第十六章学习的强化学习（RL）中的“State”（状态）这两个概念。

虽然它们都叫“状态”，但它们的**含义**、**作用**以及在各自系统中所扮演的**角色**有何根本不同？

| 特性 | LangGraph 中的 State | 强化学习中的 State |
| :--- | :--- | :--- |
| **本质定义** | | |
| **作用与目的** | | |
| **如何被改变** | | |
| **与“决策”的关系**| | |

*(请填充上表，作为你的回答。)*

### 2. Vibe Coding 架构挑战：为审批流增加“打回重填”与“人工干预”

在 `17.5` 节的实践中，你已经构建了一个单向的审批流。现在，作为一名系统架构师，你需要对这个流程进行一次关键的迭代，使其更贴近真实的、复杂的业务场景。

**核心任务**：为你之前构建的“差旅审批机器人”，增加一个“**打回重填并等待人工补充材料**”的循环机制。

这是一个综合性的架构设计与实践练习。请与你的 AI 编程助手协作，完成以下挑战。

**第一阶段：架构设计与流程再造**

1.  **扩展 LLM 的决策空间**
    *   修改你给“经理” LLM 的 Prompt，使其在决策时，除了“批准”和“拒绝”外，增加第三个选项：“**信息不足，打回重填**”。你需要精确地设计 Prompt，让 LLM 能够在申请理由不充分时，稳定地输出这个特定的决策。

2.  **设计新节点与新路径**
    *   你需要增加一个新的节点，例如 `request_clarification` (要求澄清)，当经理的决策是“打回重填”时，工作流会进入这个节点。
    *   这个新节点的核心职责是**暂停工作流**，并向申请人（在这里，就是你）发出通知，要求补充信息。这在 `LangGraph` 中通常通过一个专门的“等待”或“人工干预”步骤来实现。

3.  **绘制最终的架构图**
    *   请使用 Mermaid.js 语法，绘制出**包含新循环逻辑**的、完整的差旅审批工作流图。
    *   在图中，必须清晰地展示出以下所有元素：
        *   初始的金额判断路由 (`< 500` vs. `>= 500`)。
        *   “直接批准”和“经理审批”两个核心路径。
        *   从“经理审批”出发的三条条件分支：“批准” -> 结束，“拒绝” -> 结束，“信息不足” -> **新路径**。
        *   “要求澄清”节点，并明确标注这是一个“**等待人类输入 (Human-in-the-Loop)**”的环节。
        *   从“人类输入”环节重新回到“经理审批”节点的循环路径，形成闭环。

**第二阶段：反思与总结**

1.  **阐述“人类在环”的价值**
    *   你为什么选择将“人类输入”节点设置在那个位置？
    *   与让 AI 自己尝试“自我修正”或追问相比，你设计的这种明确的“人类在环路中 (Human-in-the-loop)”的架构，为你这个审批系统带来了哪些具体的好处？（提示：可以从可靠性、可审计性、处理模糊场景的能力、最终用户体验等角度思考）。

2.  **展望下一代工作流**
    *   通过本次实践，你是否认为 `LangGraph` 这种“状态图”范式，相比于传统的、由大量 `if-else` 语句和函数调用堆砌的程序，是构建复杂 AI Agent 的一种更优越的架构？为什么？它在**可维护性**、**可观测性**和**可扩展性**方面，展现了哪些优势？
