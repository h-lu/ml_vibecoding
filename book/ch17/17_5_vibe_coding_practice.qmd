---
title: "17.5 Vibe Coding 实践：用 LangGraph 构建一个“差旅申请审批”机器人"
---

理论已经足够，现在是架构师们卷起袖子，亲自构建的时候了！

在这个 Vibe Coding 实践中，我们将利用 LangGraph 的核心能力，构建一个智能的、有状态的、包含条件分支的差旅申请审批机器人。这个机器人将模拟一个真实的企业工作流，并让你亲身体验到 LangGraph 带来的强大控制力。

### 准备工作

在开始之前，请确保你的环境中安装了所有必要的 Python 库。我们将使用 DeepSeek 提供的 API。

```bash
pip install langgraph langchain_deepseek langchain
```
同时，请确保你已经设置了 `DEEPSEEK_API_KEY` 环境变量。

### 任务描述

你将构建一个差旅审批智能体。它的核心逻辑是：

-   如果差旅申请的金额小于 500 元，那么系统可以直接自动批准。
-   如果金额大于等于 500 元，则需要调用一个外部工具，查询该员工过去的出差记录，然后将这些信息连同申请本身，交由一个 LLM 来扮演的“经理”，做出最终的审批决定（批准或拒绝）。

这个任务虽小，但五脏俱全，它完美地展示了 LangGraph 如何处理**状态、工具调用和条件分支**。

### 第一阶段：AI 起草 LangGraph 流程 (15分钟)

打开你的 AI 编程助手，我们将通过一个高层次的、目标驱动的指令，让 AI 为我们生成整个应用的原型代码。相信 AI 的能力，它会处理好导入库、定义参数等细节。

::: {.callout-tip}
#### Vibe Coding 指令

请向你的 AI 助手发出以下指令：

> 你好，请使用 LangGraph 和 DeepSeek 模型，帮我构建一个完整的差旅审批流程的 Python 脚本。
>
> 这是一个有状态的图，核心逻辑如下：
>
> 1.  **定义图的状态**，需要包含申请人姓名、金额、事由，以及后续步骤可能会产生的历史记录检查结果和最终决定。
>
> 2.  **定义一个查询员工历史的工具**，它接收员工姓名，返回一个模拟的字符串即可。
>
> 3.  **构建图的逻辑**：
>     -   图的**入口节点**是一个路由，它检查申请金额。如果金额小于500，就走向“直接批准”路径；否则，走向“经理审批”路径。
>     -   **“直接批准”节点**是一个简单的状态更新节点，将决定标记为“自动批准”。
>     -   **“经理审批”节点**是核心。它需要先调用我们定义的工具查询历史记录，然后将所有信息整合起来，调用 **DeepSeek 的聊天模型**（如 `deepseek-chat`）来做出“批准”或“拒绝”的最终决定。
>     -   所有路径的终点都是图的 `END`。
>
> 4.  **提供调用示例**，用两个不同金额的申请（例如300元和2000元）来演示图是如何根据条件执行不同分支的，并打印出最终结果。
>
> 请生成一个功能完整、可直接运行的脚本。
:::

### 第二阶段：人类架构师分析与扩展 (25分钟)

AI 助手已经为你生成了基础代码。现在，轮到你——人类架构师——来发挥真正的价值了。

**你的任务：**

1.  **代码审查与验证**：仔细阅读 AI 生成的代码。
    -   它是否完全理解了你的意图？DeepSeek 模型是否被正确调用？图的逻辑是否符合你的设计？
    -   运行代码，确认不同金额的申请是否真的触发了正确的条件分支？最终的 `manager_decision` 是否符合预期？

2.  **增加“循环”逻辑**：这是一个经典的架构师挑战。当前的流程是一个单向图。如果“经理”（LLM）觉得申请理由不充分，他现在只能“拒绝”。我们如何修改这个图，以实现一个**“打回重填”的循环**？
    -   **思考**：你需要增加一个什么样的节点？（例如 `ask_for_more_info_node`）
    -   **思考**：你需要如何修改“经理审批”节点的 Prompt，让 LLM 在做决定时，有第三个选项：“信息不足，打回重填”？
    -   **思考**：你需要如何修改**条件边**，增加从“经理审批”节点出发的新路径？一条指向 `END`（如果批准/拒绝），另一条指向新节点，并从新节点再指回到图的某个位置，形成循环。
    -   **动手**：与你的 AI 助手协作，告诉它你的修改意图，让它帮你修改代码，实现这个循环。

3.  **状态追踪与调试**：在图的每一个节点的入口处，都加上 `print(state)`。
    -   重新运行你的代码，特别是包含循环逻辑的版本。
    -   观察这个全局的 `State` 对象，是如何在图中被不同的节点读取和修改的。
    -   **反思**：这种清晰、可观测的状态流转，对于你未来调试一个比这复杂 100 倍的生产系统，有多么重要？

### 第三阶段：系统反思 (10分钟)

恭喜你完成了一个完整的、有状态的、可循环的智能工作流！现在，让我们从更高的维度来反思。

-   **问题1**：与无状态的 ReAct 黑盒循环相比，你认为 `LangGraph` 这种“有状态图”结构，对于构建企业级的、需要高可靠性和可审计性的工作流自动化系统，其最大的优势体现在哪里？
-   **问题2**：在这次实践中，你是否感受到了“人”与“AI”协作的价值？AI 负责快速生成标准化的框架代码，而你（人类架构师）则负责更具创造性的工作，如设计复杂的控制流（循环）和进行系统级的调试与优化。这是否符合我们提倡的 Vibe Coding 理念？
-   **问题3（展望）**：你认为这种基于“状态图”的工作流编排范式，未来是否有可能成为所有复杂软件（不仅仅是 AI 应用）的主流开发模式？为什么？
