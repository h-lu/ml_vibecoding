---
title: "17.3 智能体的三大支柱：规划、工具与记忆"
---

无论智能体的上层架构（无论是路由、顺序还是层次化）如何设计，其最底层的运作都离不开三个核心支柱。这三大支柱共同构成了智能体之所以“智能”和“自主”的基础。一个合格的架构师必须深刻理解这三大支柱的内涵及其相互关系。

```{mermaid}
graph TD
    subgraph "自主智能体 (Autonomous Agent)"
        P[规划 Planning<br>大脑: 决定做什么、怎么做]
        T[工具使用 Tool Use<br>手脚: 与世界交互]
        M[记忆 Memory<br>笔记本: 记录上下文和知识]
    end

    P -- "生成行动步骤" --> T
    T -- "获取外部信息" --> M
    M -- "提供上下文和知识" --> P
    T -- "执行结果" --> P
```

### 1. 规划 (Planning)：智能体的“大脑”

**规划能力决定了一个智能体的智能上限。** 它指的是智能体如何将一个宏大的、模糊的目标，分解成一系列清晰、具体、可执行的步骤。没有规划，智能体就会像无头苍蝇一样，即使拥有再多工具也无法完成复杂任务。

规划主要分为两种模式：

-   **隐式规划 (Implicit Planning)**：经典的 ReAct 框架就是一种隐式规划。智能体并不会在一开始就想好所有步骤，而是在每一步执行完后，根据最新的观察结果，“思考”下一步该干什么。这种模式更加灵活，适应性强，但对于需要长远布局的复杂任务可能会“鼠目寸光”。

-   **显式规划 (Explicit Planning)**：对于更复杂的任务，一种更可靠的方式是让 LLM 首先生成一个完整的、包含多个步骤的行动计划 (Plan)，然后再逐一委托工具去执行。这使得整个过程更可控、更易于调试。在层次化智能体架构中，“总管”智能体的核心职责就是进行显式规划。

### 2. 工具使用 (Tool Use)：智能体的“手脚”

**工具使用的能力决定了智能体与世界交互的广度和深度。** 工具是智能体打破“玻璃墙”，对外部数字世界产生实际影响的唯一途径。这里的“工具”是一个广义的概念，它可以是：

-   一个可以调用的 API（如查询天气、预订机票）
-   一个可以执行的函数（如进行数学计算、读写文件）
-   一个可以查询的数据库或知识库
-   甚至是另一个智能体

对于架构师而言，设计好用的工具至关重要。一个核心的设计原则是：**工具的 `description`（描述）是模型唯一的“使用说明书”**。LLM 就是靠阅读这个 `description` 来决定在何时、以及如何使用这个工具的。因此，工具的描述必须清晰、准确、详尽，最好能包含参数说明和实际例子，不能有任何可能引起歧义的地方。

### 3. 记忆 (Memory)：智能体的“笔记本”

**记忆能力决定了智能体能否处理长期、多轮的复杂任务。** 没有记忆，智能体的每一次交互都是“失忆”的，它无法从过去的对话中学习，也无法记住用户的偏好。

智能体的记忆系统通常也分为两类：

-   **短期记忆 (Short-term Memory)**：通常指代当前对话的上下文历史。它使得智能体能够理解多轮对话的语境，例如，用户说的“它”指的是上一轮提到的“北京烤鸭”。短期记忆通常随着一次会话的结束而消失。

-   **长期记忆 (Long-term Memory)**：为了让智能体拥有跨会话的、持久的记忆，我们需要更复杂的机制。目前，最主流的实现方式就是我们**在第 15 章深入学习过的 RAG 技术**。我们可以将历史对话的关键信息、用户的核心偏好、成功解决问题的案例等，提取出来并存入向量数据库。当新的任务来临时，智能体首先去这个“记忆库”中进行检索，将相关的历史信息取出来，作为其决策的参考。这就赋予了智能体从过去经验中学习和成长的能力。

**三大支柱是一个有机整体。** 智能体需要**记忆**来为**规划**提供上下文信息和历史经验；**规划**产生具体的行动步骤，并交由**工具**执行；**工具**的执行结果又会更新**记忆**，并成为下一轮**规划**的输入。正是这三者之间紧密、循环的互动，才驱动了智能体的自主运行。

