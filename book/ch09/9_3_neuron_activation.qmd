---
title: "9.3 神经元与激活函数：引入非线性的“拐点”"
---

为了构建一个能够学习复杂曲线的强大模型，我们需要从它的最基本单元开始——**人工神经元 (Artificial Neuron)**。这个概念的灵感，松散地来源于生物学中的神经元。

### 生物灵感：一个简化的抽象

生物神经元是一个细胞，它从其他神经元接收信号（通过树突），在细胞体内进行处理，如果信号的强度超过某个阈值，它就会被“激活”，并向其他神经元发送一个信号（通过轴突）。

人工神经元是对这个过程的高度简化和数学抽象。它并不试图模拟生物过程的所有复杂细节，而是抓住了最核心的思想：**接收输入，进行计算，然后决定是否激活并传递一个输出。**

### 人工神经元的“两步走”

一个人工神经元的工作可以分解为两个简单的步骤：

**第一步：加权求和 (Weighted Sum)**

神经元会接收来自上一层或其他数据源的多个输入值（例如，$x_1, x_2, x_3$）。每一个输入，都被赋予一个**权重 (Weight)**（例如，$w_1, w_2, w_3$）。这个权重代表了对应输入的重要性。一个大的正权重意味着这个输入对神经元的激活有很强的促进作用；一个大的负权重则意味着它有很强的抑制作用。

除了输入和权重，还有一个特殊的参数叫做**偏置 (Bias)**（$b$）。你可以把它理解为一个“激活阈值”的调节器。偏置值决定了在没有任何输入的情况下，神经元有多容易被激活。

神经元做的第一件事，就是把所有的输入和它们对应的权重相乘，然后再加上这个偏置。这个过程，就是一个简单的线性运算——**加权求和**。

$$
\text{加权和} = (w_1 \cdot x_1 + w_2 \cdot x_2 + w_3 \cdot x_3 + \dots) + b = \sum_{i} w_i x_i + b
$$

<div class="quarto-figure quarto-figure-center">
<img src="https://upload.wikimedia.org/wikipedia/commons/c/c6/Artificial_neuron_structure.svg" class="img-fluid" alt="人工神经元模型" width="500">
<figcaption>人工神经元模型示意图 (图片来源: Wikimedia Commons)</figcaption>
</div>

**第二步：非线性激活 (Non-linear Activation)**

如果神经元只做加权求和，那么无论我们把多少个这样的神经元堆叠在一起，最终整个网络也只是一个复杂的线性模型，它永远无法学习出“曲线”边界。

**因此，为了引入非线性，我们需要第二步，也是至关重要的一步：激活函数 (Activation Function)。**

在计算出加权和之后，这个结果会被送入一个**非线性**的激活函数（通常用 $\sigma$ 或 $f$ 表示），生成神经元最终的输出值。

$$
\text{输出} = f(\text{加权和}) = f(\sum_{i} w_i x_i + b)
$$

**激活函数，就是赋予神经元“拐弯”能力的关键。** 它在神经元的输出中引入了非线性，使得整个网络能够摆脱直线的束缚。

### 常见的激活函数：从 S 型到“硬拐弯”

历史上有许多种激活函数，这里我们介绍几个最重要的：

1.  **Sigmoid 函数**
    -   **形状**：一个平滑的“S”型曲线，可以将任何实数输入压缩到 (0, 1) 的范围内。
    -   **优点**：输出值在 (0, 1) 之间，可以被解释为“概率”；函数平滑，处处可导。
    -   **缺点**：在输入值很大或很小时，函数的梯度（斜率）会变得非常小，接近于零。这会导致一个严重的问题，叫做**梯度消失 (Vanishing Gradients)**，使得深层网络的训练变得非常困难。同时，它的计算也相对复杂。

2.  **Tanh (双曲正切) 函数**
    -   **形状**：也是一个“S”型曲线，但它将输入压缩到 (-1, 1) 的范围内。
    -   **优点**：与 Sigmoid 相比，它的输出是“零中心”的，这在某些情况下能帮助模型更快地收敛。
    -   **缺点**：同样存在梯度消失的问题。

3.  **ReLU (Rectified Linear Unit, 修正线性单元)**
    -   **形状**：这是迄今为止最重要、最常用的激活函数。它的规则极其简单：**如果输入大于0，则输出等于输入；如果输入小于或等于0，则输出为0。**
        $$
        \text{ReLU}(x) = \max(0, x)
        $$
    -   **优点**：
        -   **计算高效**：没有复杂的指数运算，计算速度极快。
        -   **解决梯度消失**：在输入为正的部分，梯度恒为1，极大地缓解了梯度消失问题，使得训练深度网络成为可能。
        -   **稀疏性**：它会让一部分神经元的输出为0，这使得网络变得“稀疏”，在计算上更高效，并且可能有助于学习到更鲁棒的特征。
    -   **缺点**：存在一个叫做“Dying ReLU”的问题，即如果一个神经元的输入恒为负，那么它可能永远不会被激活，其梯度也永远为0，导致它无法再进行学习。

<iframe src="../assets/ch09/activation_functions_interactive.html" width="100%" height="800" frameborder="0"></iframe>

::: {.callout-note title="架构师视角"}
激活函数的选择，是深度学习架构设计中的一个基础但关键的决策。

-   **ReLU 是现代深度学习的默认和首选。** 它的简洁和高效，是引爆第三次神经网络浪潮的关键算法创新之一。在设计一个新的网络时，通常应该从 ReLU 开始。
-   Sigmoid 和 Tanh 由于其梯度消失的固有缺陷，现在已经很少被用在深度网络的隐藏层中。Sigmoid 主要用于二元分类问题的**输出层**，因为它的 (0, 1) 输出可以很好地代表概率。
-   还有许多 ReLU 的变体，如 Leaky ReLU, ELU 等，它们试图解决“Dying ReLU”的问题，但在实践中，标准的 ReLU 往往已经足够好。

一个神经元，通过**加权求和**与**非线性激活**这两个简单的步骤，就从一个线性处理器，蜕变成了一个可以产生“拐点”的非线性单元。这看似微小的一步，却是构建出能够拟合任意复杂函数的深度神经网络的基石。
:::
