{"title":"13.4 架构选型：认识 Transformer 家族的三大主力","markdown":{"yaml":{"title":"13.4 架构选型：认识 Transformer 家族的三大主力"},"headingText":"1. 编码器-解码器 (Encoder-Decoder) 架构","containsRefs":false,"markdown":"\n\n在掌握了微调的通用技术后，架构师的下一个核心任务，是在选择预训练模型时，理解不同 Transformer 架构的内在差异。当前，Transformer 家族主要分为三大主流架构：**编码器-解码器 (Encoder-Decoder)**、**仅编码器 (Encoder-Only)** 和 **仅解码器 (Decoder-Only)**。\n\n它们都源于最初在 \"[Attention Is All You Need](https://arxiv.org/abs/1706.03762)\" 论文中提出的经典设计，但各自的侧重点和应用场景却有天壤之别。理解它们的区别，是做出正确技术选型的关键。\n\n\n这是最原始、最完整的 Transformer 架构。\n\n-   **代表模型**：原始 Transformer, T5, BART\n-   **工作流程**：\n    1.  **编码器 (Encoder)**：负责“阅读”并“理解”整个输入序列。它通过自注意力机制，将输入序列（例如，一句德语）压缩成一个富含上下文信息的中间表示（a set of contextualized vectors）。\n    2.  **解码器 (Decoder)**：负责“生成”输出序列。它在每一步生成时，不仅会像我们之前学习的自回归模型那样，关注自己已经生成的部分，还会通过一种特殊的“交叉注意力 (Cross-Attention)”机制，去持续地“请教”编码器输出的那个中间表示，以确保生成的内容与输入相关。\n-   **核心特点**：天生就是为了**序列到序列 (Sequence-to-Sequence, Seq2Seq)** 任务而设计的。它有一个专门的模块负责理解输入，一个专门的模块负责生成输出。\n-   **典型应用**：\n    -   **机器翻译**：输入一种语言，输出另一种语言。\n    -   **文本摘要**：输入一篇长文章，输出一个简短的摘要。\n    -   **对话**：输入一个问题，输出一个回答。\n\n![Encoder-Decoder Architecture](https://jalammar.github.io/images/t/The_transformer_encoder_decoder_stack.png)\n*图片来源: \"The Illustrated Transformer\" by Jay Alammar*\n\n### 2. 仅编码器 (Encoder-Only) 架构\n\n这个架构舍弃了原始的解码器部分，只保留了编码器。\n\n-   **代表模型**：BERT, RoBERTa, DeBERTa\n-   **工作流程**：整个模型就是一个强大的编码器。它的设计目标不是生成，而是**理解**。在预训练时，它通常使用“掩码语言模型 (MLM)”任务，即预测句子中被随机挖去的词。为了完成这个任务，模型必须能够深刻地理解一个词的**双向上下文 (bi-directional context)**，即同时关注这个词左边和右边的所有词。\n-   **核心特点**：对输入文本的理解能力最强、最深入。它输出的是一系列高度情景化的词向量，非常适合作为后续简单任务（如分类）的输入。是 **自然语言理解 (Natural Language Understanding, NLU)** 任务的王者。\n-   **典型应用**：\n    -   **情感分析**：判断整段文本的情感。\n    -   **意图分类**：判断用户的指令属于哪个类别。\n    -   **命名实体识别 (NER)**：从文本中抽取出人名、地名、组织名等。\n    -   **句子关系判断**：判断两句话是矛盾、蕴含还是中立。\n\n![BERT (Encoder-Only) Architecture](https://jalammar.github.io/images/f/bert-input-output.png)\n*图片来源: \"The Illustrated BERT\" by Jay Alammar*\n\n### 3. 仅解码器 (Decoder-Only) 架构\n\n这个架构则舍弃了编码器，只保留了解码器（但做了一些修改，去掉了交叉注意力部分）。\n\n-   **代表模型**：GPT 系列 (GPT-3, GPT-4), LLaMA, Mistral, Qwen\n-   **工作流程**：整个模型就是一个纯粹的、强大的生成器。它的预训练任务是“因果语言模型 (CLM)”，即根据前面的所有词，预测下一个最可能的词。因此，在模型内部，信息流动是**单向 (uni-directional)** 的。在处理一个词时，它只能看到它自己和它前面的词，绝对不能“偷看”后面的词。这被称为**自回归 (Autoregressive)** 生成。\n-   **核心特点**：是**自然语言生成 (Natural Language Generation, NLG)** 的大师。它极其擅长遵循给定的提示 (Prompt)，连贯、流畅地生成各种形式的文本。\n-   **典型应用**：\n    -   **开放式文本生成**：写文章、写故事、写诗、写代码。\n    -   **聊天机器人与对话系统**：扮演一个角色进行开放式对话。\n    -   **通用问答**：回答关于世界知识的各种问题。\n    -   **In-Context Learning**：在 Prompt 中给出少量示例，模型就能模仿示例完成任务，而无需微调。\n\n![GPT (Decoder-Only) Architecture](https://jalammar.github.io/images/f/gpt2-input-output-2.png)\n*图片来源: \"The Illustrated GPT-2\" by Jay Alammar*\n\n### 架构师的决策清单\n\n| 架构类型 | **核心能力** | **信息流** | **典型任务** | **代表模型** | **选型考量** |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| **Encoder-Decoder** | 转换 (Transforming) | 双向 -> 单向 | 机器翻译, 文本摘要 | T5, BART | 当输入和输出都是结构化的、但内容需要重新组织的序列时。 |\n| **Encoder-Only** | 理解 (Understanding) | 双向 (Bi-directional) | 文本分类, 实体识别 | BERT, RoBERTa | 当你需要对输入文本进行深度分析和分类，而不是生成新文本时。 |\n| **Decoder-Only** | 生成 (Generating) | 单向 (Uni-directional) | 开放式生成, 对话, 问答 | GPT, Llama, Mistral | 当你的核心需求是基于提示生成流畅、连贯的文本时。 |\n\n作为一名现代的系统架构师，你可能 90% 的时间都在和 **Decoder-Only** 架构（也就是我们常说的“大语言模型” LLMs）打交道。但理解另外两种架构的存在和优势，能让你的知识体系更完整，在面对特定 NLU 或 Seq2Seq 任务时，能够做出更精准、更高效的技术选型。\n","srcMarkdownNoYaml":"\n\n在掌握了微调的通用技术后，架构师的下一个核心任务，是在选择预训练模型时，理解不同 Transformer 架构的内在差异。当前，Transformer 家族主要分为三大主流架构：**编码器-解码器 (Encoder-Decoder)**、**仅编码器 (Encoder-Only)** 和 **仅解码器 (Decoder-Only)**。\n\n它们都源于最初在 \"[Attention Is All You Need](https://arxiv.org/abs/1706.03762)\" 论文中提出的经典设计，但各自的侧重点和应用场景却有天壤之别。理解它们的区别，是做出正确技术选型的关键。\n\n### 1. 编码器-解码器 (Encoder-Decoder) 架构\n\n这是最原始、最完整的 Transformer 架构。\n\n-   **代表模型**：原始 Transformer, T5, BART\n-   **工作流程**：\n    1.  **编码器 (Encoder)**：负责“阅读”并“理解”整个输入序列。它通过自注意力机制，将输入序列（例如，一句德语）压缩成一个富含上下文信息的中间表示（a set of contextualized vectors）。\n    2.  **解码器 (Decoder)**：负责“生成”输出序列。它在每一步生成时，不仅会像我们之前学习的自回归模型那样，关注自己已经生成的部分，还会通过一种特殊的“交叉注意力 (Cross-Attention)”机制，去持续地“请教”编码器输出的那个中间表示，以确保生成的内容与输入相关。\n-   **核心特点**：天生就是为了**序列到序列 (Sequence-to-Sequence, Seq2Seq)** 任务而设计的。它有一个专门的模块负责理解输入，一个专门的模块负责生成输出。\n-   **典型应用**：\n    -   **机器翻译**：输入一种语言，输出另一种语言。\n    -   **文本摘要**：输入一篇长文章，输出一个简短的摘要。\n    -   **对话**：输入一个问题，输出一个回答。\n\n![Encoder-Decoder Architecture](https://jalammar.github.io/images/t/The_transformer_encoder_decoder_stack.png)\n*图片来源: \"The Illustrated Transformer\" by Jay Alammar*\n\n### 2. 仅编码器 (Encoder-Only) 架构\n\n这个架构舍弃了原始的解码器部分，只保留了编码器。\n\n-   **代表模型**：BERT, RoBERTa, DeBERTa\n-   **工作流程**：整个模型就是一个强大的编码器。它的设计目标不是生成，而是**理解**。在预训练时，它通常使用“掩码语言模型 (MLM)”任务，即预测句子中被随机挖去的词。为了完成这个任务，模型必须能够深刻地理解一个词的**双向上下文 (bi-directional context)**，即同时关注这个词左边和右边的所有词。\n-   **核心特点**：对输入文本的理解能力最强、最深入。它输出的是一系列高度情景化的词向量，非常适合作为后续简单任务（如分类）的输入。是 **自然语言理解 (Natural Language Understanding, NLU)** 任务的王者。\n-   **典型应用**：\n    -   **情感分析**：判断整段文本的情感。\n    -   **意图分类**：判断用户的指令属于哪个类别。\n    -   **命名实体识别 (NER)**：从文本中抽取出人名、地名、组织名等。\n    -   **句子关系判断**：判断两句话是矛盾、蕴含还是中立。\n\n![BERT (Encoder-Only) Architecture](https://jalammar.github.io/images/f/bert-input-output.png)\n*图片来源: \"The Illustrated BERT\" by Jay Alammar*\n\n### 3. 仅解码器 (Decoder-Only) 架构\n\n这个架构则舍弃了编码器，只保留了解码器（但做了一些修改，去掉了交叉注意力部分）。\n\n-   **代表模型**：GPT 系列 (GPT-3, GPT-4), LLaMA, Mistral, Qwen\n-   **工作流程**：整个模型就是一个纯粹的、强大的生成器。它的预训练任务是“因果语言模型 (CLM)”，即根据前面的所有词，预测下一个最可能的词。因此，在模型内部，信息流动是**单向 (uni-directional)** 的。在处理一个词时，它只能看到它自己和它前面的词，绝对不能“偷看”后面的词。这被称为**自回归 (Autoregressive)** 生成。\n-   **核心特点**：是**自然语言生成 (Natural Language Generation, NLG)** 的大师。它极其擅长遵循给定的提示 (Prompt)，连贯、流畅地生成各种形式的文本。\n-   **典型应用**：\n    -   **开放式文本生成**：写文章、写故事、写诗、写代码。\n    -   **聊天机器人与对话系统**：扮演一个角色进行开放式对话。\n    -   **通用问答**：回答关于世界知识的各种问题。\n    -   **In-Context Learning**：在 Prompt 中给出少量示例，模型就能模仿示例完成任务，而无需微调。\n\n![GPT (Decoder-Only) Architecture](https://jalammar.github.io/images/f/gpt2-input-output-2.png)\n*图片来源: \"The Illustrated GPT-2\" by Jay Alammar*\n\n### 架构师的决策清单\n\n| 架构类型 | **核心能力** | **信息流** | **典型任务** | **代表模型** | **选型考量** |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| **Encoder-Decoder** | 转换 (Transforming) | 双向 -> 单向 | 机器翻译, 文本摘要 | T5, BART | 当输入和输出都是结构化的、但内容需要重新组织的序列时。 |\n| **Encoder-Only** | 理解 (Understanding) | 双向 (Bi-directional) | 文本分类, 实体识别 | BERT, RoBERTa | 当你需要对输入文本进行深度分析和分类，而不是生成新文本时。 |\n| **Decoder-Only** | 生成 (Generating) | 单向 (Uni-directional) | 开放式生成, 对话, 问答 | GPT, Llama, Mistral | 当你的核心需求是基于提示生成流畅、连贯的文本时。 |\n\n作为一名现代的系统架构师，你可能 90% 的时间都在和 **Decoder-Only** 架构（也就是我们常说的“大语言模型” LLMs）打交道。但理解另外两种架构的存在和优势，能让你的知识体系更完整，在面对特定 NLU 或 Seq2Seq 任务时，能够做出更精准、更高效的技术选型。\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../assets/sidebar-collapse.css"],"toc":false,"number-sections":false,"highlight-style":"github","include-in-header":{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n<style>\n/* ChatGPT 风格变量 */\n:root {\n  --chatgpt-primary: #000000;\n  --chatgpt-secondary: #6b7280;\n  --chatgpt-background: #ffffff;\n  --chatgpt-surface: #f7f7f8;\n  --chatgpt-border: #e5e5e5;\n  --chatgpt-accent: #10a37f;\n}\n</style>\n"},"include-after-body":{"text":"<script src=\"assets/sidebar-collapse.js\"></script>\n"},"output-file":"13_4_transformer_architectures.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.14","theme":["cosmo","../assets/chatgpt-style.scss"],"fig-cap-location":"bottom","mainfont":"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'","monofont":"Monaco, 'SF Mono', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace","fontsize":"16px","linestretch":1.6,"code-copy":true,"max-width":"1200px","title":"13.4 架构选型：认识 Transformer 家族的三大主力"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}