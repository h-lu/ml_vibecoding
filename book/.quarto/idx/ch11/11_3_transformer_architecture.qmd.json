{"title":"11.3 Transformer 宏观架构：组装一台“注意力机器”","markdown":{"yaml":{"title":"11.3 Transformer 宏观架构：组装一台“注意力机器”"},"headingText":"1. 多头注意力 (Multi-Head Attention)","containsRefs":false,"markdown":"\n\n理解了自注意力（Self-Attention）这个核心部件，我们就可以开始组装一台完整的 Transformer 了。一个标准的 Transformer 模型，通常由一个**编码器 (Encoder)** 和一个**解码器 (Decoder)** 组成，而这两者都是由一层层堆叠起来的模块构成的。\n\n我们首先聚焦于构成编码器的核心模块，它主要由以下几个关键组件巧妙地搭建而成。\n\n![Transformer Encoder Block](https://jalammar.github.io/images/t/encoder_layer.png)\n*图片来源: \"The Illustrated Transformer\" by Jay Alammar*\n\n\n如果我们只用一套 `Q, K, V` 权重矩阵去做自注意力，就好比只用一个“视角”去审视句子。但一个句子中的依赖关系是多层次的，例如，有些关系是关于语法结构的，有些是关于语义关联的。\n\n**多头注意力 (Multi-Head Attention)** 机制，正是为了解决这个问题。它不再只学习一套 `WQ, WK, WV` 权重矩阵，而是并列地、独立地学习**多套**（例如，8套或12套）权重矩阵。\n\n-   输入的词嵌入向量会被分别送入这8套独立的“注意力头 (Attention Head)”。\n-   每一个头都会独立地执行一次完整的自注意力计算（QKV三步曲），并产生一个输出向量。这就像8个独立的“专家”，从8个不同的“子空间”或“角度”去分析和重组序列信息。\n-   最后，这8个头输出的向量会被拼接（Concatenate）在一起，并通过一个额外的线性层进行整合，形成最终的输出。\n\n这种机制极大地增强了模型的表达能力，使其能够同时捕捉到序列中不同层面、不同类型的依赖关系。\n\n### 2. 位置编码 (Positional Encoding)\n\n自注意力机制有一个非常重要的特性（或者说缺陷）：它本身是**无视顺序的**。在计算注意力权重时，一个词与所有其他词的交互是同时发生的，模型并不知道哪个词在前，哪个词在后。如果直接将词嵌入送入自注意力层，它得到的结果和一个被打乱顺序的“词袋”是完全一样的。\n\n这对于语言这种高度依赖顺序的序列来说是致命的。为了解决这个问题，Transformer 的发明者提出了一种简单而聪明的解决方案：**位置编码 (Positional Encoding)**。\n\n-   **核心思想**：在将词嵌入向量输入给编码器之前，先给每个词的向量，**加上**一个代表其在序列中位置的**位置向量**。\n-   **实现方式**：这个位置向量不是学习来的，而是使用不同频率的正弦（sin）和余弦（cos）函数直接计算生成的。\n    $$\n    \\begin{align}\n    &PE_{(pos, 2i)} = \\sin(pos / 10000^{2i/d_{\\text{model}}}) \\\\\n    &PE_{(pos, 2i+1)} = \\cos(pos / 10000^{2i/d_{\\text{model}}})\n    \\end{align}\n    $$\n    其中 `pos` 是词的位置，`i` 是向量的维度。这种设计的好处是，每个位置都有一个独一无二的编码，并且模型可以很容易地学习到不同位置之间的相对关系。\n\n通过这种方式，位置信息就被巧妙地“注入”到了输入向量中，使得后续的自注意力层在计算时，能够间接地利用到词语的顺序信息。\n\n### 3. 前馈网络 (Feed-Forward Network)\n\n在每个多头注意力层之后，都会跟一个相对简单但非常关键的组件：一个**位置无关的前馈网络 (Position-wise Feed-Forward Network)**。\n\n-   它就是一个我们在第九章深入学习过的**标准全连接神经网络 (FCN)**，通常包含两层线性变换和一次 ReLU 激活函数。你可以将 FCN 的作用，理解为一个**加工和提炼**的步骤：在注意力层通过“聚合”从整个序列中收集了相关信息之后，FCN 负责对这些高度情景化的信息进行一次强大的非线性变换，从而提取出更高级、更抽象的特征，为下一层或最终的输出任务做准备。\n\n### 4. 残差连接与层归一化 (Residuals & Layer Normalization)\n\n最后，为了能够成功地训练一个由很多层模块堆叠起来的深度网络，Transformer 还使用了两个在深度学习领域中非常关键的“技巧”：\n\n-   **残差连接 (Residual Connection)**：这正是我们在第九章学习过的、用于解决深度网络退化问题的关键“神级装备”。在每个子层（如多头注意力层、前馈网络层）的输入和输出之间，都建立一个“直连通道”（Short-cut）。即，子层的最终输出是 `Sublayer(x) + x`。这极大地缓解了梯度消失问题，使得信息和梯度能够更顺畅地在网络中流动，是构建深度 Transformer 的基石。\n-   **层归一化 (Layer Normalization)**：在每个残差连接之后，都会进行一次层归一化。它会对每个样本、每个层的输出向量进行归一化（使其均值为0，方差为1），这能有效地稳定训练过程，加速模型收敛。\n\n---\n\n::: {.callout-note title=\"架构师视角：工业界的效率优化\"}\n我们刚才学习的是 Transformer 的经典原始设计。在工业界，为了追求更高的效率和性能，研究者们也提出了一系列优化。\n\n- **Multi-Query Attention (MQA)**：在标准的“多头注意力”中，每个头都有自己独立的 K 和 V 投影权重。MQA 是一种优化，它让所有的头共享同一套 K 和 V 权重，只保留各自独立的 Q 权重。这极大地减少了模型在推理时所需缓存（KV Cache）的内存占用，对于长序列生成任务尤其高效。\n- **相对位置编码 (RoPE & ALiBi)**：我们学习的经典位置编码是“绝对”位置编码。但业界也发展出了更先进的“相对”位置编码方案，如 RoPE 和 ALiBi。它们不直接告诉模型“你在第5个位置”，而是通过修改注意力计算方式，让模型感知到“你和另一个词相距3个位置”，这种相对关系对于模型处理超长序列的泛化能力更有帮助。\n:::\n\n### 整体架构图\n\n将以上所有组件组合起来，我们就得到了一个完整的 Transformer 编码器模块。一个完整的编码器，就是将这个模块**重复堆叠 N 次**（例如，BERT-base 堆叠了12次）。\n\n```{mermaid}\ngraph TD\n    subgraph \"Encoder Module (1 of N)\"\n        A[Input Embeddings + Positional Encoding] --> B[Multi-Head Attention];\n        B --> C{Add & Norm};\n        A --> C;\n\n        C --> D[Feed-Forward Network];\n        D --> E{Add & Norm};\n        C --> E;\n    end\n\n    E --> F[Output to next Encoder Module or Decoder];\n\n    style B fill:#f9f,stroke:#333,stroke-width:2px\n    style D fill:#ccf,stroke:#333,stroke-width:2px\n```\n通过这样的设计，Transformer 成功地构建了一台强大、高效、可深度堆叠的“注意力机器”，为处理序列数据带来了革命性的突破。\n","srcMarkdownNoYaml":"\n\n理解了自注意力（Self-Attention）这个核心部件，我们就可以开始组装一台完整的 Transformer 了。一个标准的 Transformer 模型，通常由一个**编码器 (Encoder)** 和一个**解码器 (Decoder)** 组成，而这两者都是由一层层堆叠起来的模块构成的。\n\n我们首先聚焦于构成编码器的核心模块，它主要由以下几个关键组件巧妙地搭建而成。\n\n![Transformer Encoder Block](https://jalammar.github.io/images/t/encoder_layer.png)\n*图片来源: \"The Illustrated Transformer\" by Jay Alammar*\n\n### 1. 多头注意力 (Multi-Head Attention)\n\n如果我们只用一套 `Q, K, V` 权重矩阵去做自注意力，就好比只用一个“视角”去审视句子。但一个句子中的依赖关系是多层次的，例如，有些关系是关于语法结构的，有些是关于语义关联的。\n\n**多头注意力 (Multi-Head Attention)** 机制，正是为了解决这个问题。它不再只学习一套 `WQ, WK, WV` 权重矩阵，而是并列地、独立地学习**多套**（例如，8套或12套）权重矩阵。\n\n-   输入的词嵌入向量会被分别送入这8套独立的“注意力头 (Attention Head)”。\n-   每一个头都会独立地执行一次完整的自注意力计算（QKV三步曲），并产生一个输出向量。这就像8个独立的“专家”，从8个不同的“子空间”或“角度”去分析和重组序列信息。\n-   最后，这8个头输出的向量会被拼接（Concatenate）在一起，并通过一个额外的线性层进行整合，形成最终的输出。\n\n这种机制极大地增强了模型的表达能力，使其能够同时捕捉到序列中不同层面、不同类型的依赖关系。\n\n### 2. 位置编码 (Positional Encoding)\n\n自注意力机制有一个非常重要的特性（或者说缺陷）：它本身是**无视顺序的**。在计算注意力权重时，一个词与所有其他词的交互是同时发生的，模型并不知道哪个词在前，哪个词在后。如果直接将词嵌入送入自注意力层，它得到的结果和一个被打乱顺序的“词袋”是完全一样的。\n\n这对于语言这种高度依赖顺序的序列来说是致命的。为了解决这个问题，Transformer 的发明者提出了一种简单而聪明的解决方案：**位置编码 (Positional Encoding)**。\n\n-   **核心思想**：在将词嵌入向量输入给编码器之前，先给每个词的向量，**加上**一个代表其在序列中位置的**位置向量**。\n-   **实现方式**：这个位置向量不是学习来的，而是使用不同频率的正弦（sin）和余弦（cos）函数直接计算生成的。\n    $$\n    \\begin{align}\n    &PE_{(pos, 2i)} = \\sin(pos / 10000^{2i/d_{\\text{model}}}) \\\\\n    &PE_{(pos, 2i+1)} = \\cos(pos / 10000^{2i/d_{\\text{model}}})\n    \\end{align}\n    $$\n    其中 `pos` 是词的位置，`i` 是向量的维度。这种设计的好处是，每个位置都有一个独一无二的编码，并且模型可以很容易地学习到不同位置之间的相对关系。\n\n通过这种方式，位置信息就被巧妙地“注入”到了输入向量中，使得后续的自注意力层在计算时，能够间接地利用到词语的顺序信息。\n\n### 3. 前馈网络 (Feed-Forward Network)\n\n在每个多头注意力层之后，都会跟一个相对简单但非常关键的组件：一个**位置无关的前馈网络 (Position-wise Feed-Forward Network)**。\n\n-   它就是一个我们在第九章深入学习过的**标准全连接神经网络 (FCN)**，通常包含两层线性变换和一次 ReLU 激活函数。你可以将 FCN 的作用，理解为一个**加工和提炼**的步骤：在注意力层通过“聚合”从整个序列中收集了相关信息之后，FCN 负责对这些高度情景化的信息进行一次强大的非线性变换，从而提取出更高级、更抽象的特征，为下一层或最终的输出任务做准备。\n\n### 4. 残差连接与层归一化 (Residuals & Layer Normalization)\n\n最后，为了能够成功地训练一个由很多层模块堆叠起来的深度网络，Transformer 还使用了两个在深度学习领域中非常关键的“技巧”：\n\n-   **残差连接 (Residual Connection)**：这正是我们在第九章学习过的、用于解决深度网络退化问题的关键“神级装备”。在每个子层（如多头注意力层、前馈网络层）的输入和输出之间，都建立一个“直连通道”（Short-cut）。即，子层的最终输出是 `Sublayer(x) + x`。这极大地缓解了梯度消失问题，使得信息和梯度能够更顺畅地在网络中流动，是构建深度 Transformer 的基石。\n-   **层归一化 (Layer Normalization)**：在每个残差连接之后，都会进行一次层归一化。它会对每个样本、每个层的输出向量进行归一化（使其均值为0，方差为1），这能有效地稳定训练过程，加速模型收敛。\n\n---\n\n::: {.callout-note title=\"架构师视角：工业界的效率优化\"}\n我们刚才学习的是 Transformer 的经典原始设计。在工业界，为了追求更高的效率和性能，研究者们也提出了一系列优化。\n\n- **Multi-Query Attention (MQA)**：在标准的“多头注意力”中，每个头都有自己独立的 K 和 V 投影权重。MQA 是一种优化，它让所有的头共享同一套 K 和 V 权重，只保留各自独立的 Q 权重。这极大地减少了模型在推理时所需缓存（KV Cache）的内存占用，对于长序列生成任务尤其高效。\n- **相对位置编码 (RoPE & ALiBi)**：我们学习的经典位置编码是“绝对”位置编码。但业界也发展出了更先进的“相对”位置编码方案，如 RoPE 和 ALiBi。它们不直接告诉模型“你在第5个位置”，而是通过修改注意力计算方式，让模型感知到“你和另一个词相距3个位置”，这种相对关系对于模型处理超长序列的泛化能力更有帮助。\n:::\n\n### 整体架构图\n\n将以上所有组件组合起来，我们就得到了一个完整的 Transformer 编码器模块。一个完整的编码器，就是将这个模块**重复堆叠 N 次**（例如，BERT-base 堆叠了12次）。\n\n```{mermaid}\ngraph TD\n    subgraph \"Encoder Module (1 of N)\"\n        A[Input Embeddings + Positional Encoding] --> B[Multi-Head Attention];\n        B --> C{Add & Norm};\n        A --> C;\n\n        C --> D[Feed-Forward Network];\n        D --> E{Add & Norm};\n        C --> E;\n    end\n\n    E --> F[Output to next Encoder Module or Decoder];\n\n    style B fill:#f9f,stroke:#333,stroke-width:2px\n    style D fill:#ccf,stroke:#333,stroke-width:2px\n```\n通过这样的设计，Transformer 成功地构建了一台强大、高效、可深度堆叠的“注意力机器”，为处理序列数据带来了革命性的突破。\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"number-sections":false,"highlight-style":"github","include-in-header":{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n<style>\n/* ChatGPT 风格变量 */\n:root {\n  --chatgpt-primary: #000000;\n  --chatgpt-secondary: #6b7280;\n  --chatgpt-background: #ffffff;\n  --chatgpt-surface: #f7f7f8;\n  --chatgpt-border: #e5e5e5;\n  --chatgpt-accent: #10a37f;\n}\n</style>\n"},"output-file":"11_3_transformer_architecture.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.14","theme":["cosmo","../assets/chatgpt-style.scss"],"fig-cap-location":"bottom","mainfont":"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'","monofont":"Monaco, 'SF Mono', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace","fontsize":"16px","linestretch":1.6,"code-copy":true,"max-width":"1200px","mermaid":{"theme":"default","config":{"themeVariables":{"fontFamily":"\"Helvetica Neue\", Helvetica, Arial, sans-serif","primaryColor":"#2F5597","primaryBorderColor":"#1F4E79","secondaryColor":"#A5A5A5","tertiaryColor":"#FAF3E0","lineColor":"#555555"}}},"title":"11.3 Transformer 宏观架构：组装一台“注意力机器”"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}