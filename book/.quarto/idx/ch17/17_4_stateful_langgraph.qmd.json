{"title":"17.4 用 LangGraph 构建“有状态”的智能体","markdown":{"yaml":{"title":"17.4 用 LangGraph 构建“有状态”的智能体"},"headingText":"LangGraph 的革命：将工作流定义为“图”","containsRefs":false,"markdown":"\n\n理论知识已经铺垫完毕，现在让我们进入实践环节。要构建我们在 17.2 节中设想的那些强大、可靠的智能体架构，我们需要一个与之匹配的、工业级的开发框架。\n\n在 LangChain 的早期版本中，最常用的智能体执行器是 `AgentExecutor`。它将 ReAct 循环封装成一个易于调用的黑盒。这对于快速验证想法非常方便，但当面临真正复杂的、需要高可靠性的业务流程时，它的局限性就暴露无遗：\n\n-   **无状态 (Stateless)**：`AgentExecutor` 本质上是一个“无状态”的循环。它只关心“上一步”和“下一步”，很难追踪和管理一个贯穿任务全程的、统一的状态。\n-   **控制流有限 (Limited Control Flow)**：在它的黑盒循环里，我们很难实现复杂的控制逻辑，比如“如果 A 工具失败了，就去尝试 B 工具”，或者“当满足某个条件时，跳回到第三步重新执行”。\n-   **难以调试 (Hard to Debug)**：由于是黑盒，当智能体行为不符合预期时，我们很难看清楚它内部到底发生了什么，到底是哪个环节出了问题。\n\n为了解决这些生产环境中的核心痛点，LangChain 团队推出了革命性的新框架：**LangGraph**。\n\n\nLangGraph 的核心思想非常优雅：**它不再将智能体的工作流看作一个线性的、神秘的循环，而是将其显式地定义为一个有向图 (Directed Graph)。**\n\n在这个图中：\n\n-   **状态 (State)**：有一个全局的、贯穿始终的状态对象。它是一个自定义的数据结构（通常是一个 Python 的 `TypedDict`），记录了工作流执行至今的所有关键信息。\n-   **节点 (Nodes)**：代表了工作流中的一个具体“步骤”。一个节点可以是一个调用 LLM 的函数，也可以是一个执行工具的函数，甚至是另一个子图（Sub-Graph）。每个节点都接收当前的状态作为输入，并返回一个更新后的状态。\n-   **边 (Edges)**：负责连接节点，定义了工作流的“流向”。边决定了在一个节点执行完毕后，接下来应该去往哪个节点。\n\n```{mermaid}\ngraph TD\n    A[开始] --> B(节点1: 分析需求);\n    B -- \"边\" --> C(节点2: 调用工具);\n    C -- \"边\" --> D(节点3: 总结结果);\n    D --> E[结束];\n\n    subgraph \"工作流图 (Graph)\"\n        direction LR\n        B\n        C\n        D\n    end\n    \n    S[(状态对象<br>State)] -- \"在图中流动和更新\" --> B;\n    B -- \"更新\" --> S;\n    S --> C;\n    C -- \"更新\" --> S;\n    S --> D;\n```\n\n### 杀手级特性：条件边 (Conditional Edges)\n\n如果说将工作流图化是 LangGraph 的骨架，那么**条件边**就是它的神经网络，赋予了它真正的智能。\n\nLangGraph 允许我们定义一种特殊的“条件边”。在一个节点执行完毕后，我们可以通过一个路由函数 (Routing Function) 来检查当前**状态 (State)** 的内容，然后**动态地决定**工作流的下一步应该走向哪个节点。\n\n这意味着什么？这意味着我们可以在图中轻松实现所有经典的程序控制流：\n\n-   **分支 (Branching)**：`if-else` 逻辑。例如，如果状态显示“金额小于500”，则走向“直接批准”节点；否则，走向“需要经理审批”节点。\n-   **循环 (Looping)**：`while` 或 `for` 逻辑。例如，只要状态显示“任务未完成”，就一直循环“思考 -> 行动”这个子流程。\n-   **并行 (Parallelism)**：可以同时将任务分发给多个节点并行处理。\n-   **回退与重试 (Fallback & Retry)**：可以轻松实现“如果A节点失败，则跳转到B节点重试”的容错逻辑。\n\n这种对工作流的**显式、精细化控制**，正是构建严肃、可靠、可维护的企业级 AI 应用所必需的。LangGraph 将智能体从一个“凭感觉”运行的黑盒，变成了一个逻辑清晰、行为可预测、过程可追溯的“白盒”系统。\n\n::: {.callout-tip}\n### Vibe Coding 提示\n\n请向你的 AI 编程助手提问：\n\n> \"请用一个具体的例子，对比 LangChain 的 `AgentExecutor` 和 `LangGraph`。假设我想实现一个‘先尝试用 Google 搜索答案，如果搜索结果为空，则再尝试用 DuckDuckGo 搜索’的容错逻辑。请解释为什么用 `LangGraph` 实现这个逻辑会比用 `AgentExecutor` 更简单、更清晰。\"\n\n通过这个问题，你可以非常直观地感受到 LangGraph 在控制流上的巨大优势。\n:::\n\n","srcMarkdownNoYaml":"\n\n理论知识已经铺垫完毕，现在让我们进入实践环节。要构建我们在 17.2 节中设想的那些强大、可靠的智能体架构，我们需要一个与之匹配的、工业级的开发框架。\n\n在 LangChain 的早期版本中，最常用的智能体执行器是 `AgentExecutor`。它将 ReAct 循环封装成一个易于调用的黑盒。这对于快速验证想法非常方便，但当面临真正复杂的、需要高可靠性的业务流程时，它的局限性就暴露无遗：\n\n-   **无状态 (Stateless)**：`AgentExecutor` 本质上是一个“无状态”的循环。它只关心“上一步”和“下一步”，很难追踪和管理一个贯穿任务全程的、统一的状态。\n-   **控制流有限 (Limited Control Flow)**：在它的黑盒循环里，我们很难实现复杂的控制逻辑，比如“如果 A 工具失败了，就去尝试 B 工具”，或者“当满足某个条件时，跳回到第三步重新执行”。\n-   **难以调试 (Hard to Debug)**：由于是黑盒，当智能体行为不符合预期时，我们很难看清楚它内部到底发生了什么，到底是哪个环节出了问题。\n\n为了解决这些生产环境中的核心痛点，LangChain 团队推出了革命性的新框架：**LangGraph**。\n\n### LangGraph 的革命：将工作流定义为“图”\n\nLangGraph 的核心思想非常优雅：**它不再将智能体的工作流看作一个线性的、神秘的循环，而是将其显式地定义为一个有向图 (Directed Graph)。**\n\n在这个图中：\n\n-   **状态 (State)**：有一个全局的、贯穿始终的状态对象。它是一个自定义的数据结构（通常是一个 Python 的 `TypedDict`），记录了工作流执行至今的所有关键信息。\n-   **节点 (Nodes)**：代表了工作流中的一个具体“步骤”。一个节点可以是一个调用 LLM 的函数，也可以是一个执行工具的函数，甚至是另一个子图（Sub-Graph）。每个节点都接收当前的状态作为输入，并返回一个更新后的状态。\n-   **边 (Edges)**：负责连接节点，定义了工作流的“流向”。边决定了在一个节点执行完毕后，接下来应该去往哪个节点。\n\n```{mermaid}\ngraph TD\n    A[开始] --> B(节点1: 分析需求);\n    B -- \"边\" --> C(节点2: 调用工具);\n    C -- \"边\" --> D(节点3: 总结结果);\n    D --> E[结束];\n\n    subgraph \"工作流图 (Graph)\"\n        direction LR\n        B\n        C\n        D\n    end\n    \n    S[(状态对象<br>State)] -- \"在图中流动和更新\" --> B;\n    B -- \"更新\" --> S;\n    S --> C;\n    C -- \"更新\" --> S;\n    S --> D;\n```\n\n### 杀手级特性：条件边 (Conditional Edges)\n\n如果说将工作流图化是 LangGraph 的骨架，那么**条件边**就是它的神经网络，赋予了它真正的智能。\n\nLangGraph 允许我们定义一种特殊的“条件边”。在一个节点执行完毕后，我们可以通过一个路由函数 (Routing Function) 来检查当前**状态 (State)** 的内容，然后**动态地决定**工作流的下一步应该走向哪个节点。\n\n这意味着什么？这意味着我们可以在图中轻松实现所有经典的程序控制流：\n\n-   **分支 (Branching)**：`if-else` 逻辑。例如，如果状态显示“金额小于500”，则走向“直接批准”节点；否则，走向“需要经理审批”节点。\n-   **循环 (Looping)**：`while` 或 `for` 逻辑。例如，只要状态显示“任务未完成”，就一直循环“思考 -> 行动”这个子流程。\n-   **并行 (Parallelism)**：可以同时将任务分发给多个节点并行处理。\n-   **回退与重试 (Fallback & Retry)**：可以轻松实现“如果A节点失败，则跳转到B节点重试”的容错逻辑。\n\n这种对工作流的**显式、精细化控制**，正是构建严肃、可靠、可维护的企业级 AI 应用所必需的。LangGraph 将智能体从一个“凭感觉”运行的黑盒，变成了一个逻辑清晰、行为可预测、过程可追溯的“白盒”系统。\n\n::: {.callout-tip}\n### Vibe Coding 提示\n\n请向你的 AI 编程助手提问：\n\n> \"请用一个具体的例子，对比 LangChain 的 `AgentExecutor` 和 `LangGraph`。假设我想实现一个‘先尝试用 Google 搜索答案，如果搜索结果为空，则再尝试用 DuckDuckGo 搜索’的容错逻辑。请解释为什么用 `LangGraph` 实现这个逻辑会比用 `AgentExecutor` 更简单、更清晰。\"\n\n通过这个问题，你可以非常直观地感受到 LangGraph 在控制流上的巨大优势。\n:::\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../assets/sidebar-collapse.css"],"toc":false,"number-sections":false,"highlight-style":"github","include-in-header":{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n<style>\n/* ChatGPT 风格变量 */\n:root {\n  --chatgpt-primary: #000000;\n  --chatgpt-secondary: #6b7280;\n  --chatgpt-background: #ffffff;\n  --chatgpt-surface: #f7f7f8;\n  --chatgpt-border: #e5e5e5;\n  --chatgpt-accent: #10a37f;\n}\n</style>\n"},"include-after-body":{"text":"<script src=\"assets/sidebar-collapse.js\"></script>\n"},"output-file":"17_4_stateful_langgraph.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.14","theme":["cosmo","../assets/chatgpt-style.scss"],"fig-cap-location":"bottom","mainfont":"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'","monofont":"Monaco, 'SF Mono', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace","fontsize":"16px","linestretch":1.6,"code-copy":true,"max-width":"1200px","title":"17.4 用 LangGraph 构建“有状态”的智能体"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}