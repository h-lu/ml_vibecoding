{"title":"17.2 架构师的蓝图：主流智能体架构模式","markdown":{"yaml":{"title":"17.2 架构师的蓝图：主流智能体架构模式"},"headingText":"1. 单一智能体 + 工具 (Single Agent + Tools)","containsRefs":false,"markdown":"\n\n要将“数字员工”从概念变为现实，我们需要超越单一的指令-响应循环。就像建立一家公司需要设计组织架构一样，构建复杂的智能体系统，也需要清晰的**架构模式**。\n\n一个著名的早期智能体框架叫做 ReAct（Reasoning and Acting，思考与行动）。它通过让 LLM 在“思考（Thought）”和“行动（Action）”之间交替，实现简单的工具调用。你可以将 ReAct 看作是智能体最基本的“细胞”。但要构建一个能完成复杂任务的“生物体”，我们就需要将这些“细胞”组织起来，形成更宏大的结构。\n\n作为系统架构师，我们需要掌握以下几种主流的、已经被业界广泛验证的智能体团队协作模式：\n\n\n这是最基础的模式，也是 ReAct 框架的直接体现。一个“全才”智能体负责处理所有任务，它拥有一套预先定义好的工具箱。\n\n- **工作方式**：接收用户请求 -> 思考需要哪个工具 -> 调用工具 -> 观察结果 -> 循环此过程直到任务完成。\n- **适用场景**：目标明确、步骤直接的简单任务。例如，“今天上海的天气怎么样？”智能体只需调用天气查询工具即可。\n- **好比**：一个随身带着瑞士军刀的个人助理。\n\n```{mermaid}\ngraph TD\n    A[用户请求] --> B{单一智能体};\n    B -- 思考 --> C[工具箱: 天气API, 计算器, ...];\n    C -- 行动 --> B;\n    B --> D[最终答案];\n```\n\n### 2. 路由智能体 (Router / Dispatcher Agent)\n\n当任务类型多样，需要由不同的“专家”来处理时，路由模式就派上了用场。一个“总机”或“分发员”智能体负责将任务分配给最合适的下游智能体或工具。\n\n- **工作方式**：接收用户请求 -> 分析请求意图 -> 将请求**路由**给最合适的专家智能体。\n- **适用场景**：需要根据输入类型选择不同处理路径的场景。例如，一个客服平台，可以根据用户是想“查询订单”还是“投诉建议”，将其分发给“订单查询智能体”或“客户关系智能体”。\n- **好比**：公司的前台总机，负责将电话转接到正确的部门。\n\n```{mermaid}\ngraph TD\n    A[用户请求] --> B{路由智能体};\n    B -- \"意图: 查订单\" --> C[订单处理专家];\n    B -- \"意图: 写代码\" --> D[代码生成专家];\n    B -- \"意图: 聊天\" --> E[闲聊专家];\n    C --> F[完成];\n    D --> F;\n    E --> F;\n```\n\n### 3. 顺序智能体流 (Sequential Agents / \"Pipeline\")\n\n对于流程固化的多阶段任务，我们可以设计一条“流水线”，让多个“专才”智能体按固定顺序接力完成工作。\n\n- **工作方式**：任务从第一个智能体开始，处理完成后，其输出会作为下一个智能体的输入，依次传递，直到最后一个智能体完成全部工作。\n- **适用场景**：流程高度固化、步骤清晰的工作。例如，一份“自动化市场分析报告”的生成流程：\n    1.  **数据抓取智能体**：从指定网站抓取原始数据。\n    2.  **数据清洗智能体**：清洗并格式化数据。\n    3.  **数据分析智能体**：进行统计分析和可视化。\n    4.  **报告撰写智能体**：将分析结果整合成一份完整的报告。\n- **好比**：工厂里的生产流水线。\n\n```{mermaid}\ngraph LR\n    A[开始] --> B[智能体 A: 抓取];\n    B --> C[智能体 B: 清洗];\n    C --> D[智能体 C: 分析];\n    D --> E[智能体 D: 撰写];\n    E --> F[结束];\n```\n\n### 4. 层次化智能体 (Hierarchical Agents / \"Manager-Worker\")\n\n这是目前最强大、最灵活的架构之一，尤其适用于需要动态规划和协作的复杂、开放式任务。该模式中，一个“总管”智能体负责任务的整体规划、分解和监督，并将子任务分配给下属的“员工”智能体去执行。\n\n- **工作方式**：\n    1.  “总管”接收复杂目标，进行**任务分解 (Task Decomposition)**，形成一个计划。\n    2.  “总管”将计划中的第一个子任务分配给一个或多个合适的“员工”。\n    3.  “员工”执行任务，并将结果汇报给“总管”。\n    4.  “总管”根据执行结果，**反思 (Reflection)** 并更新计划，然后继续分配下一个任务，直到最终目标达成。\n- **适用场景**：几乎所有复杂的、可以被清晰分解的开放式任务。例如，完成用户“帮我策划一次为期五天的北京家庭旅行”的请求。总管可以分解出“查询往返机票”、“预订酒店”、“规划每日行程”、“查找特色餐厅”等子任务，并分配给不同的员工智能体。\n- **好比**：一个项目经理（总管）带领一个工程师团队（员工）。\n\n```{mermaid}\ngraph TD\n    subgraph \"智能体团队\"\n        A[总管智能体]\n        B[员工A: 机票专家]\n        C[员工B: 酒店专家]\n        D[员工C: 行程规划专家]\n    end\n    \n    U[用户: \"策划北京五日游\"] --> A;\n    A -- \"1. 规划 & 分解\" --> A;\n    A -- \"2. 分配: 查机票\" --> B;\n    B -- \"3. 执行 & 汇报\" --> A;\n    A -- \"4. 分配: 订酒店\" --> C;\n    C -- \"5. 执行 & 汇报\" --> A;\n    A -- \"6. 分配: 定行程\" --> D;\n    D -- \"7. 执行 & 汇报\" --> A;\n    A -- \"8. 整合 & 输出\" --> F[最终旅行计划];\n```\n\n作为架构师，理解这些模式的优劣和适用场景至关重要。在实际应用中，我们常常会将这些模式组合起来，形成一个混合架构，以应对真实世界中错综复杂的业务需求。在接下来的章节中，我们将学习如何使用 LangGraph 这个强大的工具，来实现这些复杂的智能体架构。\n\n::: {.callout-tip}\n### Vibe Coding 提示\n现在，请打开你的 AI 编程助手，尝试向它发出这样的指令：\n\n> “请为我之前学习的四种智能体架构模式——单一智能体、路由智能体、顺序智能体流、层次化智能体——分别再补充一个你认为最贴切的商业应用案例，并解释为什么这个案例适合该架构。”\n\n观察 AI 助手的回答，这能帮助你更深入地理解每种架构的精髓。\n:::\n\n","srcMarkdownNoYaml":"\n\n要将“数字员工”从概念变为现实，我们需要超越单一的指令-响应循环。就像建立一家公司需要设计组织架构一样，构建复杂的智能体系统，也需要清晰的**架构模式**。\n\n一个著名的早期智能体框架叫做 ReAct（Reasoning and Acting，思考与行动）。它通过让 LLM 在“思考（Thought）”和“行动（Action）”之间交替，实现简单的工具调用。你可以将 ReAct 看作是智能体最基本的“细胞”。但要构建一个能完成复杂任务的“生物体”，我们就需要将这些“细胞”组织起来，形成更宏大的结构。\n\n作为系统架构师，我们需要掌握以下几种主流的、已经被业界广泛验证的智能体团队协作模式：\n\n### 1. 单一智能体 + 工具 (Single Agent + Tools)\n\n这是最基础的模式，也是 ReAct 框架的直接体现。一个“全才”智能体负责处理所有任务，它拥有一套预先定义好的工具箱。\n\n- **工作方式**：接收用户请求 -> 思考需要哪个工具 -> 调用工具 -> 观察结果 -> 循环此过程直到任务完成。\n- **适用场景**：目标明确、步骤直接的简单任务。例如，“今天上海的天气怎么样？”智能体只需调用天气查询工具即可。\n- **好比**：一个随身带着瑞士军刀的个人助理。\n\n```{mermaid}\ngraph TD\n    A[用户请求] --> B{单一智能体};\n    B -- 思考 --> C[工具箱: 天气API, 计算器, ...];\n    C -- 行动 --> B;\n    B --> D[最终答案];\n```\n\n### 2. 路由智能体 (Router / Dispatcher Agent)\n\n当任务类型多样，需要由不同的“专家”来处理时，路由模式就派上了用场。一个“总机”或“分发员”智能体负责将任务分配给最合适的下游智能体或工具。\n\n- **工作方式**：接收用户请求 -> 分析请求意图 -> 将请求**路由**给最合适的专家智能体。\n- **适用场景**：需要根据输入类型选择不同处理路径的场景。例如，一个客服平台，可以根据用户是想“查询订单”还是“投诉建议”，将其分发给“订单查询智能体”或“客户关系智能体”。\n- **好比**：公司的前台总机，负责将电话转接到正确的部门。\n\n```{mermaid}\ngraph TD\n    A[用户请求] --> B{路由智能体};\n    B -- \"意图: 查订单\" --> C[订单处理专家];\n    B -- \"意图: 写代码\" --> D[代码生成专家];\n    B -- \"意图: 聊天\" --> E[闲聊专家];\n    C --> F[完成];\n    D --> F;\n    E --> F;\n```\n\n### 3. 顺序智能体流 (Sequential Agents / \"Pipeline\")\n\n对于流程固化的多阶段任务，我们可以设计一条“流水线”，让多个“专才”智能体按固定顺序接力完成工作。\n\n- **工作方式**：任务从第一个智能体开始，处理完成后，其输出会作为下一个智能体的输入，依次传递，直到最后一个智能体完成全部工作。\n- **适用场景**：流程高度固化、步骤清晰的工作。例如，一份“自动化市场分析报告”的生成流程：\n    1.  **数据抓取智能体**：从指定网站抓取原始数据。\n    2.  **数据清洗智能体**：清洗并格式化数据。\n    3.  **数据分析智能体**：进行统计分析和可视化。\n    4.  **报告撰写智能体**：将分析结果整合成一份完整的报告。\n- **好比**：工厂里的生产流水线。\n\n```{mermaid}\ngraph LR\n    A[开始] --> B[智能体 A: 抓取];\n    B --> C[智能体 B: 清洗];\n    C --> D[智能体 C: 分析];\n    D --> E[智能体 D: 撰写];\n    E --> F[结束];\n```\n\n### 4. 层次化智能体 (Hierarchical Agents / \"Manager-Worker\")\n\n这是目前最强大、最灵活的架构之一，尤其适用于需要动态规划和协作的复杂、开放式任务。该模式中，一个“总管”智能体负责任务的整体规划、分解和监督，并将子任务分配给下属的“员工”智能体去执行。\n\n- **工作方式**：\n    1.  “总管”接收复杂目标，进行**任务分解 (Task Decomposition)**，形成一个计划。\n    2.  “总管”将计划中的第一个子任务分配给一个或多个合适的“员工”。\n    3.  “员工”执行任务，并将结果汇报给“总管”。\n    4.  “总管”根据执行结果，**反思 (Reflection)** 并更新计划，然后继续分配下一个任务，直到最终目标达成。\n- **适用场景**：几乎所有复杂的、可以被清晰分解的开放式任务。例如，完成用户“帮我策划一次为期五天的北京家庭旅行”的请求。总管可以分解出“查询往返机票”、“预订酒店”、“规划每日行程”、“查找特色餐厅”等子任务，并分配给不同的员工智能体。\n- **好比**：一个项目经理（总管）带领一个工程师团队（员工）。\n\n```{mermaid}\ngraph TD\n    subgraph \"智能体团队\"\n        A[总管智能体]\n        B[员工A: 机票专家]\n        C[员工B: 酒店专家]\n        D[员工C: 行程规划专家]\n    end\n    \n    U[用户: \"策划北京五日游\"] --> A;\n    A -- \"1. 规划 & 分解\" --> A;\n    A -- \"2. 分配: 查机票\" --> B;\n    B -- \"3. 执行 & 汇报\" --> A;\n    A -- \"4. 分配: 订酒店\" --> C;\n    C -- \"5. 执行 & 汇报\" --> A;\n    A -- \"6. 分配: 定行程\" --> D;\n    D -- \"7. 执行 & 汇报\" --> A;\n    A -- \"8. 整合 & 输出\" --> F[最终旅行计划];\n```\n\n作为架构师，理解这些模式的优劣和适用场景至关重要。在实际应用中，我们常常会将这些模式组合起来，形成一个混合架构，以应对真实世界中错综复杂的业务需求。在接下来的章节中，我们将学习如何使用 LangGraph 这个强大的工具，来实现这些复杂的智能体架构。\n\n::: {.callout-tip}\n### Vibe Coding 提示\n现在，请打开你的 AI 编程助手，尝试向它发出这样的指令：\n\n> “请为我之前学习的四种智能体架构模式——单一智能体、路由智能体、顺序智能体流、层次化智能体——分别再补充一个你认为最贴切的商业应用案例，并解释为什么这个案例适合该架构。”\n\n观察 AI 助手的回答，这能帮助你更深入地理解每种架构的精髓。\n:::\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"number-sections":false,"highlight-style":"github","include-in-header":{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n<style>\n/* ChatGPT 风格变量 */\n:root {\n  --chatgpt-primary: #000000;\n  --chatgpt-secondary: #6b7280;\n  --chatgpt-background: #ffffff;\n  --chatgpt-surface: #f7f7f8;\n  --chatgpt-border: #e5e5e5;\n  --chatgpt-accent: #10a37f;\n}\n</style>\n"},"output-file":"17_2_agent_architectures.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.14","theme":["cosmo","../assets/chatgpt-style.scss"],"fig-cap-location":"bottom","mainfont":"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'","monofont":"Monaco, 'SF Mono', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace","fontsize":"16px","linestretch":1.6,"code-copy":true,"max-width":"1200px","title":"17.2 架构师的蓝图：主流智能体架构模式"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}