{"title":"10.3 RAG 系统架构：当大模型记忆不够用时","markdown":{"yaml":{"title":"10.3 RAG 系统架构：当大模型记忆不够用时"},"headingText":"RAG 的工作流程","containsRefs":false,"markdown":"\n\n词嵌入技术为我们提供了将文本“几何化”的强大武器。而近年来，基于这种思想并将其发展到极致的大型语言模型 (LLM)，如 GPT 系列，更是展现出了惊人的语言能力。\n\n然而，这些看似无所不知的 LLM，却有两个致命的“阿喀琉斯之踵”：\n\n1.  **知识是“静态”的**：LLM 的知识完全来自于它的训练数据，这些知识在模型训练完成的那一刻就被“冷冻”了。它不知道训练日期之后发生的任何事情，也无法访问实时的信息。\n2.  **缺乏“私有”知识**：LLM 对全世界的公开信息了如指掌，但对你公司内部的规章制度、项目报告、财务数据等私有信息一无所知。直接问它“我们公司今年的差旅报销标准是什么？”，它只会胡言乱语。\n\n如果我们想让 LLM 成为一个能真正解决特定业务问题的“专家”，而不是一个“博而不精”的通才，我们就必须为它找到一种能**实时、动态地获取外部知识**的方法。\n\n**检索增强生成 (Retrieval-Augmented Generation, RAG)**，正是当前解决这个问题最主流、最高效的系统架构。\n\n\nRAG 的核心思想非常优雅：**不要指望模型能“记住”所有知识，而是在回答问题前，先让它去“查找”相关的资料，然后基于查找到的资料来组织答案。** 这和我们人类回答专业问题时的思路如出一辙——先去图书馆或者网上查阅资料，再进行总结。\n\n一个典型的 RAG 系统主要包含以下三个核心环节：\n\n![RAG Workflow](https://python.langchain.com/v0.2/assets/images/rag_indexing-c7c46011a3493b82d023758a74f4949a.png)\n*图片来源: LangChain Documentation*\n\n#### 1. 索引 (Indexing) - 建立你的知识库\n\n这个阶段是离线的、一次性的准备工作，目标是**将你的私有文档转化为一个可供快速检索的“知识库”**。\n\n-   **加载 (Load)**：首先，加载你的原始文档（如 PDF, Word, 网站等）。\n-   **分割 (Split)**：将长文档分割成更小的、有意义的**块 (Chunks)**。这样做是因为我们通常只需要文档中的一小部分来回答某个特定问题，将整个长文档都传给 LLM 会非常低效且昂贵。\n-   **嵌入 (Embed)**：使用一个**嵌入模型 (Embedding Model)**（就像我们上一节学到的那样），将每一个文档块都转换成一个能够代表其语义的向量。\n-   **存储 (Store)**：将这些文档块的原始文本及其对应的向量，一起存入一个专门用于高效向量搜索的数据库——**向量数据库 (Vector Database)** 中。\n\n#### 2. 检索 (Retrieval) - 找到相关的“书页”\n\n这个阶段是当用户提出问题时，实时发生的。\n\n-   当用户输入一个问题（Query）时，系统首先使用**同一个嵌入模型**，将这个问题也转换成一个向量。\n-   然后，系统拿着这个“问题向量”，去向量数据库中进行**相似性搜索**，找到那些与问题向量在几何空间上最“接近”的文档块向量。\n-   这些被找回来的文档块，就是系统认为与回答当前问题最相关的“上下文 (Context)”。\n\n#### 3. 增强生成 (Augmented Generation) - 基于资料回答问题\n\n这是最后一步，也是真正利用到 LLM 强大的语言能力的一步。\n\n-   系统会将用户**原始的问题**和上一步**检索到的所有相关文档块**，一起打包成一个内容更丰富的**提示 (Prompt)**。\n-   这个 Prompt 的模板通常看起来像这样：\n\n\n>    请根据以下提供的上下文来回答问题。\n>\n>    上下文：\n>    [这里是检索到的文档块1的内容]\n>    [这里是检索到的文档块2的内容]\n>    ...\n>\n>    问题：[这里是用户的原始问题]\n>\n>    答案：\n\n-   最后，将这个“增强”过的 Prompt 发送给 LLM。由于 LLM 此时已经拿到了所有必要的“参考资料”，它就能够生成一个既准确又忠于原文的答案了。\n\n### 核心权衡：系统架构师的决策点\n\n设计一个高效的 RAG 系统，需要在多个维度上进行权衡，这是机器学习系统架构师的核心价值所在：\n\n-   **块大小 (Chunk Size)**：这是最重要的权衡点之一。块切得太大，可能会包含很多与问题无关的“噪声”，干扰 LLM 的判断，并增加成本；块切得太小，又可能导致一个完整的语义单元被拆散，丢失重要的上下文信息。\n-   **检索数量 (Top-K)**：检索回来的文档块数量（K值）也需要权衡。K 太小，可能遗漏掉关键信息；K 太大，同样会引入噪声，分散模型的“注意力”，并显著增加 API 调用成本。\n-   **嵌入模型的选择**：不同的嵌入模型在性能和成本上差异巨大。像 OpenAI 的 `text-embedding-3-large` 这样的闭源模型，通常在语义理解的精度上表现更好，但成本也更高。而一些开源模型（如 `sentence-transformers` 系列）则提供了免费、本地部署的可能，代价是性能上可能会有所妥协。选择哪个模型，取决于你的应用场景对精度和预算的要求。\n\n### 可视化流程图\n\n下面的流程图清晰地总结了 RAG 系统的完整数据流：\n\n```{mermaid}\ngraph TD\n    A[用户问题] --> B{嵌入模型};\n    B --> C[问题向量];\n    \n    subgraph 离线索引\n        D[私有文档] --> E{文档加载器};\n        E --> F{文本分割器};\n        F --> G[文档块];\n        G --> H{嵌入模型};\n        H --> I[文档块向量];\n        I --> J[(向量数据库)];\n    end\n    \n    C --> K{相似性搜索};\n    J --> K;\n    \n    K --> L[相关文档块];\n    \n    subgraph 在线生成\n        A --> M{Prompt 模板};\n        L --> M;\n        M --> N[增强后的Prompt];\n        N --> O[LLM];\n        O --> P[最终答案];\n    end\n```\n\n在下一节，我们将简要地了解一下驱动 LLM 如此强大的核心技术——注意力机制，为我们深入学习 Transformer 架构做好铺垫。\n","srcMarkdownNoYaml":"\n\n词嵌入技术为我们提供了将文本“几何化”的强大武器。而近年来，基于这种思想并将其发展到极致的大型语言模型 (LLM)，如 GPT 系列，更是展现出了惊人的语言能力。\n\n然而，这些看似无所不知的 LLM，却有两个致命的“阿喀琉斯之踵”：\n\n1.  **知识是“静态”的**：LLM 的知识完全来自于它的训练数据，这些知识在模型训练完成的那一刻就被“冷冻”了。它不知道训练日期之后发生的任何事情，也无法访问实时的信息。\n2.  **缺乏“私有”知识**：LLM 对全世界的公开信息了如指掌，但对你公司内部的规章制度、项目报告、财务数据等私有信息一无所知。直接问它“我们公司今年的差旅报销标准是什么？”，它只会胡言乱语。\n\n如果我们想让 LLM 成为一个能真正解决特定业务问题的“专家”，而不是一个“博而不精”的通才，我们就必须为它找到一种能**实时、动态地获取外部知识**的方法。\n\n**检索增强生成 (Retrieval-Augmented Generation, RAG)**，正是当前解决这个问题最主流、最高效的系统架构。\n\n### RAG 的工作流程\n\nRAG 的核心思想非常优雅：**不要指望模型能“记住”所有知识，而是在回答问题前，先让它去“查找”相关的资料，然后基于查找到的资料来组织答案。** 这和我们人类回答专业问题时的思路如出一辙——先去图书馆或者网上查阅资料，再进行总结。\n\n一个典型的 RAG 系统主要包含以下三个核心环节：\n\n![RAG Workflow](https://python.langchain.com/v0.2/assets/images/rag_indexing-c7c46011a3493b82d023758a74f4949a.png)\n*图片来源: LangChain Documentation*\n\n#### 1. 索引 (Indexing) - 建立你的知识库\n\n这个阶段是离线的、一次性的准备工作，目标是**将你的私有文档转化为一个可供快速检索的“知识库”**。\n\n-   **加载 (Load)**：首先，加载你的原始文档（如 PDF, Word, 网站等）。\n-   **分割 (Split)**：将长文档分割成更小的、有意义的**块 (Chunks)**。这样做是因为我们通常只需要文档中的一小部分来回答某个特定问题，将整个长文档都传给 LLM 会非常低效且昂贵。\n-   **嵌入 (Embed)**：使用一个**嵌入模型 (Embedding Model)**（就像我们上一节学到的那样），将每一个文档块都转换成一个能够代表其语义的向量。\n-   **存储 (Store)**：将这些文档块的原始文本及其对应的向量，一起存入一个专门用于高效向量搜索的数据库——**向量数据库 (Vector Database)** 中。\n\n#### 2. 检索 (Retrieval) - 找到相关的“书页”\n\n这个阶段是当用户提出问题时，实时发生的。\n\n-   当用户输入一个问题（Query）时，系统首先使用**同一个嵌入模型**，将这个问题也转换成一个向量。\n-   然后，系统拿着这个“问题向量”，去向量数据库中进行**相似性搜索**，找到那些与问题向量在几何空间上最“接近”的文档块向量。\n-   这些被找回来的文档块，就是系统认为与回答当前问题最相关的“上下文 (Context)”。\n\n#### 3. 增强生成 (Augmented Generation) - 基于资料回答问题\n\n这是最后一步，也是真正利用到 LLM 强大的语言能力的一步。\n\n-   系统会将用户**原始的问题**和上一步**检索到的所有相关文档块**，一起打包成一个内容更丰富的**提示 (Prompt)**。\n-   这个 Prompt 的模板通常看起来像这样：\n\n\n>    请根据以下提供的上下文来回答问题。\n>\n>    上下文：\n>    [这里是检索到的文档块1的内容]\n>    [这里是检索到的文档块2的内容]\n>    ...\n>\n>    问题：[这里是用户的原始问题]\n>\n>    答案：\n\n-   最后，将这个“增强”过的 Prompt 发送给 LLM。由于 LLM 此时已经拿到了所有必要的“参考资料”，它就能够生成一个既准确又忠于原文的答案了。\n\n### 核心权衡：系统架构师的决策点\n\n设计一个高效的 RAG 系统，需要在多个维度上进行权衡，这是机器学习系统架构师的核心价值所在：\n\n-   **块大小 (Chunk Size)**：这是最重要的权衡点之一。块切得太大，可能会包含很多与问题无关的“噪声”，干扰 LLM 的判断，并增加成本；块切得太小，又可能导致一个完整的语义单元被拆散，丢失重要的上下文信息。\n-   **检索数量 (Top-K)**：检索回来的文档块数量（K值）也需要权衡。K 太小，可能遗漏掉关键信息；K 太大，同样会引入噪声，分散模型的“注意力”，并显著增加 API 调用成本。\n-   **嵌入模型的选择**：不同的嵌入模型在性能和成本上差异巨大。像 OpenAI 的 `text-embedding-3-large` 这样的闭源模型，通常在语义理解的精度上表现更好，但成本也更高。而一些开源模型（如 `sentence-transformers` 系列）则提供了免费、本地部署的可能，代价是性能上可能会有所妥协。选择哪个模型，取决于你的应用场景对精度和预算的要求。\n\n### 可视化流程图\n\n下面的流程图清晰地总结了 RAG 系统的完整数据流：\n\n```{mermaid}\ngraph TD\n    A[用户问题] --> B{嵌入模型};\n    B --> C[问题向量];\n    \n    subgraph 离线索引\n        D[私有文档] --> E{文档加载器};\n        E --> F{文本分割器};\n        F --> G[文档块];\n        G --> H{嵌入模型};\n        H --> I[文档块向量];\n        I --> J[(向量数据库)];\n    end\n    \n    C --> K{相似性搜索};\n    J --> K;\n    \n    K --> L[相关文档块];\n    \n    subgraph 在线生成\n        A --> M{Prompt 模板};\n        L --> M;\n        M --> N[增强后的Prompt];\n        N --> O[LLM];\n        O --> P[最终答案];\n    end\n```\n\n在下一节，我们将简要地了解一下驱动 LLM 如此强大的核心技术——注意力机制，为我们深入学习 Transformer 架构做好铺垫。\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"number-sections":false,"highlight-style":"github","include-in-header":{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n<style>\n/* ChatGPT 风格变量 */\n:root {\n  --chatgpt-primary: #000000;\n  --chatgpt-secondary: #6b7280;\n  --chatgpt-background: #ffffff;\n  --chatgpt-surface: #f7f7f8;\n  --chatgpt-border: #e5e5e5;\n  --chatgpt-accent: #10a37f;\n}\n</style>\n"},"output-file":"10_3_rag_architecture.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.14","theme":["cosmo","../assets/chatgpt-style.scss"],"fig-cap-location":"bottom","mainfont":"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'","monofont":"Monaco, 'SF Mono', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace","fontsize":"16px","linestretch":1.6,"code-copy":true,"max-width":"1200px","mermaid":{"theme":"neutral","config":{"themeVariables":{"fontFamily":"\"Helvetica Neue\", Helvetica, Arial, sans-serif","primaryColor":"#2F5597","primaryBorderColor":"#1F4E79","secondaryColor":"#A5A5A5","tertiaryColor":"#FAF3E0","lineColor":"#555555"}}},"title":"10.3 RAG 系统架构：当大模型记忆不够用时"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}