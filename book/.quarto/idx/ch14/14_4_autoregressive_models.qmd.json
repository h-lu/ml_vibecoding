{"title":"14.4 自回归模型：优雅的文本续写者","markdown":{"yaml":{"title":"14.4 自回归模型：优雅的文本续写者"},"headingText":"核心机制：自回归 (Autoregressive)","containsRefs":false,"markdown":"\n\n在应对 MarketVerse 的“创意文案生成”挑战时，我们需要一种能够理解和组织语言的模型。GAN 和扩散模型在图像生成上大放异彩，但在文本等序列数据上，一种更自然、更强大的范式是**自回归模型 (Autoregressive Models)**。\n\n这个概念我们其实并不陌生。在第十一章，我们已经知道 Transformer 的 **Decoder-Only 架构**（以 GPT 系列为代表）就是为生成任务而生的。现在，我们将深入其内部，从第一性原理理解它为何能成为一个“优雅的文本续写者”。\n\n\n“自回归”这个词听起来很学术，但它的思想却非常直观。想象一下你在写一个句子：“今天天气真不错，我们一起去...”\n\n在你写到“去”这个字时，你的大脑会做什么？你会回顾前面已经写下的“今天天气真不错，我们一起去”，并基于这段上下文，来预测下一个最可能的词，比如“公园”、“散步”或“吃饭”。\n\n自回归模型完全模仿了这个过程：\n\n1.  **一次只生成一个词 (Token)**：模型不会一次性生成整个句子或段落。它的工作方式是，在每个时间步，只专注于预测下一个最合适的词。\n2.  **将输岀作为新的输入**：当模型预测出下一个词（例如“公园”）后，这个词会被立刻添加到原始输入序列的末尾，形成一个新的、更长的上下文（“今天天气真不错，我们一起去公园”）。\n3.  **循环往复**：在下一步，这个新的、更长的序列将成为模型的输入，用来预测再下一个词。\n\n这个“生成-反馈-再生成”的循环，就是“自回归”的本质——**模型未来的预测，依赖于它自己过去的输出**。\n\n### 关键组件：带掩码的自注意力 (Masked Self-Attention)\n\n为了严格实现这种“一步一步往后写，绝不回头看未来”的自回归特性，Transformer Decoder 内部的自注意力机制必须被施加一个关键的约束——**掩码 (Mask)**。\n\n我们回顾一下自注意力的计算过程：Query 矩阵会和所有位置的 Key 矩阵做点积，来计算注意力分数。但在 Decoder 里，我们不允许一个位置“关注”到它后面的任何位置。例如，在预测“去”后面的词时，模型绝对不能“偷看”到答案（比如“公园”）。\n\n“掩码”机制通过一个非常聪明的方法解决了这个问题：\n\n-   在计算注意力分数后，一个“上三角”形状的掩码矩阵会被应用到分数矩阵上。\n-   这个掩码矩阵会将所有位于主对角线右上方的元素（代表着当前位置去关注未来位置）替换成一个**极大的负数**（例如 -1e9）。\n-   当这个包含了极大负数的分数矩阵被送入 Softmax 函数时，那些极大负数位置的指数会变得无限接近于 0。\n-   最终的结果是，任何词在计算它的注意力权重时，它未来的词（位于它右边的词）对它的贡献权重都将是 0。\n\n![带掩码的自注意力机制](https://s2.loli.net/2024/04/22/kI43QYJ9n7u1aN5.png){.border .rounded width=\"100%\"}\n*图 14-4：Masked Self-Attention 工作原理。在预测 \"park\" 时，模型只能关注到 \"Let's\", \"go\", \"to\", \"the\" 这些已经生成的词，而 \"park\" 之后的所有位置都被遮盖了。*\n\n这个精巧的掩码设计，是 Decoder-Only 架构能够成为一个合格的、严格遵守时序逻辑的序列生成器的根本保证。\n\n### 解码策略 (Decoding Strategy)：如何从概率中挑选词语？\n\n自回归模型在每个时间步的最后一步，是输出一个横跨整个词汇表（可能有几万个词）的概率分布。现在，问题来了：我们该如何从这几万个可能性中，选择最终要输出的那个词呢？选择的方式，就是**解码策略**。\n\n不同的解码策略会极大地影响生成文本的质量、风格和创造性。\n\n1.  **贪心搜索 (Greedy Search)**：\n    -   **策略**：最简单粗暴的方法。在每一步，总是选择当前概率最高的那个词。\n    -   **优点**：速度快，实现简单。\n    -   **缺点**：非常“短视”。可能会因为在某一步选择了一个局部最优的词，而错过了一个全局更优的句子。生成的文本往往非常重复、平淡、缺乏逻辑和创造性。\n\n2.  **束搜索 (Beam Search)**：\n    -   **策略**：贪心搜索的改进版。它在每一步不再只保留一个最优选择，而是保留 `k` 个（`k` 被称为“束宽” Beam Width）最可能的候选序列。在下一步，模型会从这 `k` 个序列出发，继续进行预测，然后再次筛选出全局最优的 `k` 个新序列。\n    -   **优点**：通过保留更多的可能性，它能生成更流畅、更连贯、逻辑性更强的文本。\n    -   **缺点**：计算成本更高。而且，它仍然倾向于生成比较“安全”和高频的文本，对于需要创造性的任务可能不是最佳选择。\n\n3.  **带温度的随机采样 (Sampling with Temperature)**：\n    -   **策略**：不再总是选择最优的，而是根据模型输出的概率分布进行**随机抽样**。这意味着，即使一个词的概率不是最高的，它仍然有机会被选中。\n    -   **温度 (Temperature)** 参数是这里的关键控制器：\n        -   **高温 (e.g., T > 1)**：它会“拉平”原始的概率分布，使得原本概率低的词也有了更高的机会被选中。这会增加文本的**随机性和创造性**，但也可能导致更多的语法错误或“胡言乱语”。\n        -   **低温 (e.g., 0 < T < 1)**：它会“锐化”概率分布，使得高概率的词的优势更加明显。这会降低随机性，使文本更接近于贪心搜索的结果，但仍保留了一定的多样性。\n        -   **T=1**：等于在原始概率分布上直接采样。\n    -   **优点**：通过调节温度，可以灵活地在“保守、准确”和“大胆、创新”之间进行权衡，非常适合需要创造力的文案生成、故事续写等任务。\n\n作为架构师，理解这些解码策略的权衡至关重要。你需要根据具体的商业需求——是需要生成高度精确、事实性的报告，还是需要创作富有想象力的营销文案——来选择最合适的解码策略。\n\n","srcMarkdownNoYaml":"\n\n在应对 MarketVerse 的“创意文案生成”挑战时，我们需要一种能够理解和组织语言的模型。GAN 和扩散模型在图像生成上大放异彩，但在文本等序列数据上，一种更自然、更强大的范式是**自回归模型 (Autoregressive Models)**。\n\n这个概念我们其实并不陌生。在第十一章，我们已经知道 Transformer 的 **Decoder-Only 架构**（以 GPT 系列为代表）就是为生成任务而生的。现在，我们将深入其内部，从第一性原理理解它为何能成为一个“优雅的文本续写者”。\n\n### 核心机制：自回归 (Autoregressive)\n\n“自回归”这个词听起来很学术，但它的思想却非常直观。想象一下你在写一个句子：“今天天气真不错，我们一起去...”\n\n在你写到“去”这个字时，你的大脑会做什么？你会回顾前面已经写下的“今天天气真不错，我们一起去”，并基于这段上下文，来预测下一个最可能的词，比如“公园”、“散步”或“吃饭”。\n\n自回归模型完全模仿了这个过程：\n\n1.  **一次只生成一个词 (Token)**：模型不会一次性生成整个句子或段落。它的工作方式是，在每个时间步，只专注于预测下一个最合适的词。\n2.  **将输岀作为新的输入**：当模型预测出下一个词（例如“公园”）后，这个词会被立刻添加到原始输入序列的末尾，形成一个新的、更长的上下文（“今天天气真不错，我们一起去公园”）。\n3.  **循环往复**：在下一步，这个新的、更长的序列将成为模型的输入，用来预测再下一个词。\n\n这个“生成-反馈-再生成”的循环，就是“自回归”的本质——**模型未来的预测，依赖于它自己过去的输出**。\n\n### 关键组件：带掩码的自注意力 (Masked Self-Attention)\n\n为了严格实现这种“一步一步往后写，绝不回头看未来”的自回归特性，Transformer Decoder 内部的自注意力机制必须被施加一个关键的约束——**掩码 (Mask)**。\n\n我们回顾一下自注意力的计算过程：Query 矩阵会和所有位置的 Key 矩阵做点积，来计算注意力分数。但在 Decoder 里，我们不允许一个位置“关注”到它后面的任何位置。例如，在预测“去”后面的词时，模型绝对不能“偷看”到答案（比如“公园”）。\n\n“掩码”机制通过一个非常聪明的方法解决了这个问题：\n\n-   在计算注意力分数后，一个“上三角”形状的掩码矩阵会被应用到分数矩阵上。\n-   这个掩码矩阵会将所有位于主对角线右上方的元素（代表着当前位置去关注未来位置）替换成一个**极大的负数**（例如 -1e9）。\n-   当这个包含了极大负数的分数矩阵被送入 Softmax 函数时，那些极大负数位置的指数会变得无限接近于 0。\n-   最终的结果是，任何词在计算它的注意力权重时，它未来的词（位于它右边的词）对它的贡献权重都将是 0。\n\n![带掩码的自注意力机制](https://s2.loli.net/2024/04/22/kI43QYJ9n7u1aN5.png){.border .rounded width=\"100%\"}\n*图 14-4：Masked Self-Attention 工作原理。在预测 \"park\" 时，模型只能关注到 \"Let's\", \"go\", \"to\", \"the\" 这些已经生成的词，而 \"park\" 之后的所有位置都被遮盖了。*\n\n这个精巧的掩码设计，是 Decoder-Only 架构能够成为一个合格的、严格遵守时序逻辑的序列生成器的根本保证。\n\n### 解码策略 (Decoding Strategy)：如何从概率中挑选词语？\n\n自回归模型在每个时间步的最后一步，是输出一个横跨整个词汇表（可能有几万个词）的概率分布。现在，问题来了：我们该如何从这几万个可能性中，选择最终要输出的那个词呢？选择的方式，就是**解码策略**。\n\n不同的解码策略会极大地影响生成文本的质量、风格和创造性。\n\n1.  **贪心搜索 (Greedy Search)**：\n    -   **策略**：最简单粗暴的方法。在每一步，总是选择当前概率最高的那个词。\n    -   **优点**：速度快，实现简单。\n    -   **缺点**：非常“短视”。可能会因为在某一步选择了一个局部最优的词，而错过了一个全局更优的句子。生成的文本往往非常重复、平淡、缺乏逻辑和创造性。\n\n2.  **束搜索 (Beam Search)**：\n    -   **策略**：贪心搜索的改进版。它在每一步不再只保留一个最优选择，而是保留 `k` 个（`k` 被称为“束宽” Beam Width）最可能的候选序列。在下一步，模型会从这 `k` 个序列出发，继续进行预测，然后再次筛选出全局最优的 `k` 个新序列。\n    -   **优点**：通过保留更多的可能性，它能生成更流畅、更连贯、逻辑性更强的文本。\n    -   **缺点**：计算成本更高。而且，它仍然倾向于生成比较“安全”和高频的文本，对于需要创造性的任务可能不是最佳选择。\n\n3.  **带温度的随机采样 (Sampling with Temperature)**：\n    -   **策略**：不再总是选择最优的，而是根据模型输出的概率分布进行**随机抽样**。这意味着，即使一个词的概率不是最高的，它仍然有机会被选中。\n    -   **温度 (Temperature)** 参数是这里的关键控制器：\n        -   **高温 (e.g., T > 1)**：它会“拉平”原始的概率分布，使得原本概率低的词也有了更高的机会被选中。这会增加文本的**随机性和创造性**，但也可能导致更多的语法错误或“胡言乱语”。\n        -   **低温 (e.g., 0 < T < 1)**：它会“锐化”概率分布，使得高概率的词的优势更加明显。这会降低随机性，使文本更接近于贪心搜索的结果，但仍保留了一定的多样性。\n        -   **T=1**：等于在原始概率分布上直接采样。\n    -   **优点**：通过调节温度，可以灵活地在“保守、准确”和“大胆、创新”之间进行权衡，非常适合需要创造力的文案生成、故事续写等任务。\n\n作为架构师，理解这些解码策略的权衡至关重要。你需要根据具体的商业需求——是需要生成高度精确、事实性的报告，还是需要创作富有想象力的营销文案——来选择最合适的解码策略。\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":false,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":true,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":false,"number-sections":false,"highlight-style":"github","include-in-header":{"text":"<link rel=\"preconnect\" href=\"https://fonts.googleapis.com\">\n<link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin>\n<link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap\" rel=\"stylesheet\">\n<style>\n/* ChatGPT 风格变量 */\n:root {\n  --chatgpt-primary: #000000;\n  --chatgpt-secondary: #6b7280;\n  --chatgpt-background: #ffffff;\n  --chatgpt-surface: #f7f7f8;\n  --chatgpt-border: #e5e5e5;\n  --chatgpt-accent: #10a37f;\n}\n</style>\n"},"output-file":"14_4_autoregressive_models.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.8.14","theme":["cosmo","../assets/chatgpt-style.scss"],"fig-cap-location":"bottom","mainfont":"Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Ubuntu, Cantarell, 'Noto Sans', sans-serif, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'","monofont":"Monaco, 'SF Mono', 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace","fontsize":"16px","linestretch":1.6,"code-copy":true,"max-width":"1200px","mermaid":{"theme":"neutral","config":{"themeVariables":{"fontFamily":"\"Helvetica Neue\", Helvetica, Arial, sans-serif","primaryColor":"#2F5597","primaryBorderColor":"#1F4E79","secondaryColor":"#A5A5A5","tertiaryColor":"#FAF3E0","lineColor":"#555555"}}},"title":"14.4 自回归模型：优雅的文本续写者"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}