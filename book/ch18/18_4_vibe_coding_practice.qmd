---
title: "18.4 Vibe Coding 实践：用 CrewAI 组建一个“市场新闻分析”团队"
---

理论已经足够，现在是架构师们亲自下场，组建自己第一支 AI 梦之队的时候了！

在这个 Vibe Coding 实践中，我们将使用 `CrewAI` 框架——因为它最直观、最高效。你将扮演一位团队领导，从零开始组建一支由三名 AI 专家组成的“市场新闻分析”团队，并自动化地完成“分析最新 AI 市场新闻并生成报告”的完整工作流。

### 准备工作

在开始之前，请确保你的环境中安装了所有必要的 Python 库。我们将需要 `crewai` 来构建团队，`crewai[tools]` 来使用内置的强大工具（如网页搜索），以及 `langchain_deepseek` 来指定我们的“大脑”——DeepSeek 模型。

```bash
#| eval: false
pip install crewai 'crewai[tools]' langchain_deepseek python-dotenv langchain-community duckduckgo-search
```

同时，请确保你已经设置了 `DEEPSEEK_API_KEY` 环境变量。

::: {.callout-note}
#### 工业级实践提示
虽然我们在代码中明确指定使用 DeepSeek 模型，但我们强烈建议你也配置好 `OPENAI_API_KEY` 环境变量。因为 `CrewAI` 或其底层依赖的 `LangChain` 在某些工具或回退 (Fallback) 机制中，可能默认会尝试调用 OpenAI 的服务。提前配置好可以避免一些预料之外的报错，是更稳妥的做法。
:::

```bash
#| eval: false
# 在你的 .env 文件中或直接在环境中设置
export DEEPSEEK_API_KEY="YOUR_DEEPSEEK_KEY"
export OPENAI_API_KEY="YOUR_OPENAI_KEY" # 建议配置
```

### 任务描述

你将组建一支团队，自动化地完成以下任务：

1.  **搜集**：利用搜索引擎，查找关于 AI 领域的最新新闻和发展动态。
2.  **分析**：对搜集到的信息进行深度分析，提炼出关键的技术趋势和潜在的商业影响。
3.  **撰写**：基于分析师的深刻洞察，撰写一篇结构清晰、语言流畅的综合性分析报告。

这个任务完美地模拟了一个真实世界中知识工作者的协作流程。

### 第一阶段：AI 起草 AI 团队 (15分钟)

打开你的 AI 编程助手，我们将通过一个目标明确的、结构清晰的指令，让 AI 为我们生成整个应用的原型代码。相信 AI 的能力，它会为我们处理好导入库、定义角色、编排任务等所有细节。

::: {.callout-tip}
#### Vibe Coding 指令

请向你的 AI 助手发出以下指令：

> 你好，请使用 `CrewAI` 框架，帮我创建一个市场分析团队。
>
> 1.  **环境设置**：从 `dotenv` 加载环境变量。
> 2.  **定义工具 (Tools)**：从 `langchain_community.tools` 导入 `DuckDuckGoSearchRun`，并创建一个实例，作为团队可以使用的免费搜索工具。
> 3.  **定义团队角色 (Agents)**：
>     -   创建一个**新闻搜集员 (Researcher)**，角色设定为“精通网络搜索的专家”，目标是“从网络上找到关于AI领域的最新、最重大的新闻”，并将 `DuckDuckGoSearchRun` 的实例作为它的专属工具。
>     -   创建一个**资深分析师 (Analyst)**，角色设定为“经验丰富的技术市场分析师”，目标是“分析搜集到的新闻，识别出关键的技术趋势和对行业的商业影响”。
>     -   创建一个**报告撰写人 (Writer)**，角色设定为“擅长将复杂技术概念转化为清晰易懂报告的科技作家”，目标是“根据分析师的洞察，撰写一篇结构清晰、语言流畅的综合性分析报告”。
> 4.  **定义任务 (Tasks)**：
>     -   为“新闻搜集员”创建一个任务，描述为“查找并整理过去24小时内关于AI领域的5条最重要的新闻。”
>     -   为“资深分析师”创建一个任务，描述为“全面分析提供的新闻内容，总结出至少3个主要的技术趋势，并阐述它们各自的商业价值。”，并设置该任务的 `context` 依赖于上一个搜集任务的输出。
>     -   为“报告撰写人”创建一个任务，描述为“基于分析师的报告，撰写一篇面向非技术背景投资人的、500字左右的市场分析报告。”，并设置该任务的 `context` 依赖于分析任务的输出。
> 5.  **组建团队与流程 (Crew & Process)**：
>     -   将以上所有智能体和任务组合成一个 `Crew`。
>     -   指定流程 (Process) 为**顺序流程 (sequential)**，确保任务按顺序执行。
>     -   指定 LLM 为 `ChatDeepSeek(model="deepseek-chat")`。
> 6.  **启动任务**：准备好 `inputs`（例如，一个空的字典），然后调用 `crew.kickoff(inputs=inputs)` 来启动整个工作流，并打印出最终结果。
:::

::: {.callout-tip}
#### 架构师洞察：Backstory 的威力
在上面的指令中，我们为每个智能体都精心设计了 `backstory`。这是一个至关重要的步骤。一个好的背景故事，就像是给智能体注入了“灵魂”和“经验”，它为 LLM 提供了丰富的上下文，能极大地影响其输出的风格、深度和专业性，是架构师提升 AI 团队输出质量的关键杠杆。
:::


### 第二阶段：人类领导的观察与调优 (25分钟)

AI 助手已经为你组建了第一支 AI 团队。现在，轮到你——人类领导者——来发挥真正的价值了。

**你的任务：**

1.  **观察协作链**：运行上面的代码。`CrewAI` 会在终端（Terminal）中，以非常清晰的格式，实时打印出每一个智能体接收到的任务、它的思考过程 (Thought Chain)、它采取的行动 (Action)，以及它的最终输出。
    -   仔细观察“搜集员”是否真的找到了相关的、最新的新闻？
    -   “分析师”的观点是否深刻，还是只是对新闻的简单复述？
    -   “撰写人”最终生成的报告，是否结构清晰、语言通顺、符合你的预期？

2.  **优化角色定义 (Role Definition)**：这是你能施加影响力的关键杠杆。
    -   **尝试修改**：“分析师”的 `role` 或 `backstory`。例如，把它从一个“技术市场分析师”，修改成一个“**对投资机会和风险特别敏感的风险投资人**”。
    -   **重新运行**：再次运行整个工作流。
    -   **对比结果**：观察最终生成的报告，其侧重点是否发生了明显的变化？新的报告是否更关注市场估值、竞争风险等投资维度的信息？这个简单的实验，能让你深刻体会到**角色定义**对于引导大模型输出的巨大威力。

3.  **思考局限性**：当前的**顺序流程 (Sequential Process)** 是单向的、不可逆的。
    -   如果“分析师”发现“搜集员”给的新闻质量不高、来源单一，它无法要求“搜集员”**重新搜索**或**更换关键词**。
    -   如果“撰写人”认为“分析师”的观点不够犀利，它也无法**打回报告**要求重写。
    -   这暴露了顺序流程的什么局限性？在哪些更复杂的业务场景下，我们可能需要一个更强大的、支持循环和条件分支的工作流引擎（例如我们上一节提到的 `LangGraph`）？

### 第三阶段：系统反思 (10分钟)

恭喜你！你已经成功领导了一支 AI 团队完成了一项复杂的知识型工作。现在，让我们从更高的维度来反思。

-   **问题1**：通过这个实践，你认为“AI 团队”相比于“单个 AI”，其输出结果最大的优势是什么？（提示：可以从**结果的深度、结构性、专业性和可靠性**等角度思考。）
-   **问题2**：在这次实践中，你是否感受到了 `CrewAI` 这种“角色驱动”框架的价值？它将技术问题（如何与 LLM API 交互）转化为了一个更符合人类心智模型的管理问题（如何定义角色、分配任务）。
-   **问题3**：你认为在不久的将来，人类知识工作者的核心竞争力，会从“**亲自执行专业任务**”，转变为“**设计、组建和管理高效的 AI 团队**”吗？为什么？

