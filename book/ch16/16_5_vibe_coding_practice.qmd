---
title: "16.5 Vibe Coding 实践：用 DPO 打造一个“礼貌待人”的 AI"
---

理论知识已经完备，现在是时候亲手体验 DPO 的威力了。在这个实践中，你将化身 AI 对齐工程师，使用 Hugging Face `TRL` (Transformer Reinforcement Learning) 库，通过 DPO 方法，将一个基础的语言模型，调优成一个更倾向于使用礼貌、谦逊语言风格的对话机器人。

这个实验被精心地设计为可以在普通的学生笔记本电脑上运行（即使没有高端 GPU），让你能零距离感受最前沿的对齐技术。

### 任务描述

你的目标是，让一个原始的、回答风格较为直接的语言模型，通过学习你提供的“礼貌偏好”，变得更加彬彬有礼。

### 第一阶段：AI 起草 DPO 训练流程 (15分钟)

让我们启动 Vibe Coding。你的第一个任务是指挥 AI 助手为你生成 DPO 训练的完整代码框架。

:::: {.callout-tip}
### Vibe Coding Prompt

向你的 AI 助手（如 Cursor）发出以下指令：

> "请使用 Hugging Face 的 `TRL` 和 `transformers` 库，为我编写一个完整的 Python 脚本，用于执行一个 DPO (Direct Preference Optimization) 训练任务。请确保脚本遵循以下所有最佳实践和要求：
>
> 1.  **模型选择**：使用一个可以在普通笔记本 CPU 或小显存 GPU 上运行的、小规模的预训练语言模型。`Qwen/Qwen3-0.6B` 是一个很好的选择。
> 2.  **模型加载**：
>     -   使用 `AutoModelForCausalLM` 加载模型，它将作为我们训练的**策略模型 (policy model)**。
>     -   **显式地**创建**参考模型 (reference model)**。最简单的方式是再次加载一次同样的模型。这是 DPO 的关键部分，用于计算 KL 散度约束。
> 3.  **偏好数据集**：不要使用外部文件。直接在脚本中创建一个小型的、内存中的偏好数据集。这个数据集应该包含至少3个样本，每个样本都是一个字典，格式为 `{'prompt': ..., 'chosen': ..., 'rejected': ...}`。数据内容要围绕“礼貌”这一主题。例如，对于同一个 prompt，`chosen` 的回答应该比 `rejected` 的回答更礼貌、更周到。
> 4.  **DPO 训练器**：
>     -   正确加载模型对应的分词器 (Tokenizer)。
>     -   初始化 `DPOConfig`，设置必要的训练参数，比如 `output_dir`、`num_train_epochs`、`per_device_train_batch_size`、`beta` (KL 散度的权重，通常设为0.1)。请选择较小的批次大小和训练轮数（例如1-2轮），以确保快速完成。
>     -   使用 `DPOTrainer` 类来封装所有组件。确保**同时传入 `model` 和 `ref_model`**。
>     -   调用 `trainer.train()` 启动训练。
>     -   训练完成后，调用 `trainer.save_model()` 保存对齐后的模型。
> 5.  **效果对比**：
>     -   在脚本的最后，编写一小段代码来展示 DPO 的效果。
>     -   加载**训练前**的原始模型和**训练后**保存的新模型。
>     -   选择一个 prompt (可以来自训练集，也可以是新的)，分别用两个模型生成回答，并将结果打印出来，以便我们能清晰地对比它们在语言风格上的变化。
> 6.  **注释**：请为代码的关键部分添加清晰的注释，解释每一步的作用，特别是关于策略模型和参考模型的部分。

::::

### 第二阶段：人类架构师分析与验证 (25分钟)

现在，AI 已经为你生成了代码初稿。你的角色从“指挥者”转变为“架构师”。你需要仔细阅读、运行并分析代码和结果。

**你的任务：**

1.  **代码审查**：AI 生成的代码是否完全符合你的指令？`model` 和 `ref_model` 是否被正确地创建并传入 `DPOTrainer`？`beta` 参数设置是否合理？
2.  **`ref_model` 的作用**：在 DPO 的损失函数中，`ref_model` 的主要作用是什么？为什么我们需要将策略模型与一个未经优化的参考模型进行比较？（回顾 16.4 节）
3.  **运行与验证**：运行脚本。观察 DPO 训练后的模型，其回答风格是否真的比原始模型更礼貌、更周到了？这个变化是否符合你的预期？
4.  **泛化能力测试**：修改效果对比部分的代码，尝试一个数据集中**完全没有**的、全新的 prompt，例如“Can you explain what a neural network is?”。观察优化后的模型是否能将学到的“礼貌”风格泛化到这个新的、不相关的场景中？
5.  **思考内存优化**：在我们的脚本中，`ref_model` 是 `model` 的一个完整副本，这会占用双倍的内存。查阅 Hugging Face TRL 文档，了解在资源受限的情况下，有哪些方法可以更高效地处理 `ref_model`？（例如：共享层、8-bit 加载、PEFT）

### 第三阶段：系统设计与反思 (10分钟)

你已经成功地完成了一次模型对齐。现在，让我们从更高的维度来审视这个过程。

**思考与讨论：**

1.  **DPO 的价值**：DPO 流程的简洁和高效，对于资源有限的中小型公司或个人开发者进行模型对齐，意味着什么？与需要训练独立奖励模型和复杂 PPO 流程的经典 RLHF 相比，它的核心优势是什么？
2.  **生产环境的 DPO**：如果我们想在一个更大的模型（如 7B 或 13B 参数）上执行 DPO，直接进行全量微调可能会非常昂贵。结合你在之前章节学到的知识和网络检索的结果，你会如何设计一个更高效的生产级 DPO 方案？（提示：思考 LoRA/PEFT 技术如何与 DPO 结合。）
3.  **设计 RLAIF 流程**：如果要将我们刚刚的实践，从依赖“人类偏好”升级为“AI 偏好”(RLAIF)，你会如何设计那个给回答打分的“教师 AI”的 Prompt（即“宪法”）？请为你设想的“礼貌模型”，写下至少三条你认为最重要的“宪法”原则。
4.  **安全与责任**：在本次实践中，我们对齐的是“礼貌”。但如果对齐的目标是更严肃的价值观，比如“公正”或“诚实”，我们如何保证偏好数据的质量和无偏性？谁有权决定什么是“好的”偏好？这引出了 AI 伦理中一个深刻的挑战。


