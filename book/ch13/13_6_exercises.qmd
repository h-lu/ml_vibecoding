---
title: "13.6 思考与练习"
---

本章我们深入了现代 AI 应用开发的核心引擎——迁移学习和参数高效微调。现在，让我们通过以下问题和挑战，来检验和巩固你对这些强大技术的理解。

### 概念辨析

1.  **解释“巨人的肩膀”**：
    请用你自己的话，并结合一个生动的比喻，解释什么是“预训练 (Pre-training)”和“微调 (Fine-tuning)”。它们各自的目标是什么？为什么这个范式能够极大地加速 AI 应用的开发？

2.  **“冻结”的智慧**：
    在微调时，有一种策略是“冻结”预训练模型的骨干网络，只训练新添加的任务头（即“特征提取”策略）。请思考并列出至少**两种**你会优先选择这种策略，而不是全量微调的业务场景，并说明你的理由。

3.  **三大家族的“族谱”**：
    请简述编码器-解码器 (Encoder-Decoder)、仅编码器 (Encoder-Only) 和仅解码器 (Decoder-Only) 这三种架构的核心设计思想和最主要的区别。并分别为每种架构举出一个最典型的应用案例。

### Vibe Coding 挑战

#### 挑战 1：完成并深化 PEFT 实践

请务必亲手完成 `13.5 Vibe Coding 实践` 中的所有挑战，特别是关于 **PEFT (LoRA)** 的部分。这是理解参数高效微调最重要的一步。
-   创建一张表格，详细对比**全量微调**和**LoRA 微调**在以下几个方面的异同：
    -   需要改动的核心代码有哪几行？
    -   大致的训练时长。
    -   最终生成的模型检查点 (checkpoint) 文件夹的总大小。
    -   在验证集上的最终准确率 (Accuracy) 或 F1 分数。
-   根据你的实验结果，你认为 LoRA 在什么情况下最具优势？

#### 挑战 2：模型“瘦身”的代价是什么？

LoRA 极大地减少了需要训练和存储的参数，但这是否会影响模型的“决策行为”？让我们用 XAI 工具来一探究竟。

> **背景**：对于文本分类任务，XAI 工具（如 SHAP）可以告诉我们，模型在做决策时，认为输入句子中的哪些词是“最重要”的。

**你的任务**：指导 AI 助手，对你在挑战 1 中训练好的**两个模型**（一个全量微调，一个 LoRA 微调）进行 XAI 分析。

> **提示 (Prompt):**
>
> “你好，我想对比我训练的两个情感分类器（一个全量微调，一个 LoRA 微调）在决策依据上是否有差异。
>
> 1.  请帮我安装 `shap` 库 (`pip install shap`)。
> 2.  加载 Hugging Face 的 `pipeline`，并分别创建基于**全量微调模型**和**LoRA 模型**的文本分类 pipeline。
> 3.  使用 `shap.Explainer` 来包装这两个 pipeline。
> 4.  选择一个你认为比较复杂的句子（例如：“This movie wasn't bad, but it wasn't good either; it was just... average.”），分别用两个 explainer 计算这个句子的 SHAP值。
> 5.  使用 `shap.plots.text` 将两个模型的归因结果可视化出来。
>
> 请确保代码完整，能让我清晰地看到两个模型对句子中每个单词的“贡献度”的可视化结果。”

**分析与思考**：
-   对比两张 SHAP 可视化图。全量微调模型和 LoRA 微调模型在判断句子情感时，关注的重点词汇是否大致相同？
-   是否存在某个词，在一个模型中被认为是重要的正面/负面词，而在另一个模型中则不那么重要？
-   这个实验结果，对于你作为架构师未来在“模型性能”和“训练/存储成本”之间做权衡时，有何启发？

通过这些练习，你将不仅仅是知识的接收者，更是知识的应用者和探索者，这正是成为一名优秀系统架构师的必经之路。
