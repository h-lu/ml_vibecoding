---
title: "13.4 架构选型：认识 Transformer 家族的三大主力"
---

在掌握了微调的通用技术后，架构师的下一个核心任务，是在选择预训练模型时，理解不同 Transformer 架构的内在差异。当前，Transformer 家族主要分为三大主流架构：**编码器-解码器 (Encoder-Decoder)**、**仅编码器 (Encoder-Only)** 和 **仅解码器 (Decoder-Only)**。

它们都源于最初在 "[Attention Is All You Need](https://arxiv.org/abs/1706.03762)" 论文中提出的经典设计，但各自的侧重点和应用场景却有天壤之别。理解它们的区别，是做出正确技术选型的关键。

### 1. 编码器-解码器 (Encoder-Decoder) 架构

这是最原始、最完整的 Transformer 架构。

-   **代表模型**：原始 Transformer, T5, BART
-   **工作流程**：
    1.  **编码器 (Encoder)**：负责“阅读”并“理解”整个输入序列。它通过自注意力机制，将输入序列（例如，一句德语）压缩成一个富含上下文信息的中间表示（a set of contextualized vectors）。
    2.  **解码器 (Decoder)**：负责“生成”输出序列。它在每一步生成时，不仅会像我们之前学习的自回归模型那样，关注自己已经生成的部分，还会通过一种特殊的“交叉注意力 (Cross-Attention)”机制，去持续地“请教”编码器输出的那个中间表示，以确保生成的内容与输入相关。
-   **核心特点**：天生就是为了**序列到序列 (Sequence-to-Sequence, Seq2Seq)** 任务而设计的。它有一个专门的模块负责理解输入，一个专门的模块负责生成输出。
-   **典型应用**：
    -   **机器翻译**：输入一种语言，输出另一种语言。
    -   **文本摘要**：输入一篇长文章，输出一个简短的摘要。
    -   **对话**：输入一个问题，输出一个回答。

![Encoder-Decoder Architecture](https://jalammar.github.io/images/t/The_transformer_encoder_decoder_stack.png)
*图片来源: "The Illustrated Transformer" by Jay Alammar*

### 2. 仅编码器 (Encoder-Only) 架构

这个架构舍弃了原始的解码器部分，只保留了编码器。

-   **代表模型**：BERT, RoBERTa, DeBERTa
-   **工作流程**：整个模型就是一个强大的编码器。它的设计目标不是生成，而是**理解**。在预训练时，它通常使用“掩码语言模型 (MLM)”任务，即预测句子中被随机挖去的词。为了完成这个任务，模型必须能够深刻地理解一个词的**双向上下文 (bi-directional context)**，即同时关注这个词左边和右边的所有词。
-   **核心特点**：对输入文本的理解能力最强、最深入。它输出的是一系列高度情景化的词向量，非常适合作为后续简单任务（如分类）的输入。是 **自然语言理解 (Natural Language Understanding, NLU)** 任务的王者。
-   **典型应用**：
    -   **情感分析**：判断整段文本的情感。
    -   **意图分类**：判断用户的指令属于哪个类别。
    -   **命名实体识别 (NER)**：从文本中抽取出人名、地名、组织名等。
    -   **句子关系判断**：判断两句话是矛盾、蕴含还是中立。

![BERT (Encoder-Only) Architecture](https://jalammar.github.io/images/f/bert-input-output.png)
*图片来源: "The Illustrated BERT" by Jay Alammar*

### 3. 仅解码器 (Decoder-Only) 架构

这个架构则舍弃了编码器，只保留了解码器（但做了一些修改，去掉了交叉注意力部分）。

-   **代表模型**：GPT 系列 (GPT-3, GPT-4), LLaMA, Mistral, Qwen
-   **工作流程**：整个模型就是一个纯粹的、强大的生成器。它的预训练任务是“因果语言模型 (CLM)”，即根据前面的所有词，预测下一个最可能的词。因此，在模型内部，信息流动是**单向 (uni-directional)** 的。在处理一个词时，它只能看到它自己和它前面的词，绝对不能“偷看”后面的词。这被称为**自回归 (Autoregressive)** 生成。
-   **核心特点**：是**自然语言生成 (Natural Language Generation, NLG)** 的大师。它极其擅长遵循给定的提示 (Prompt)，连贯、流畅地生成各种形式的文本。
-   **典型应用**：
    -   **开放式文本生成**：写文章、写故事、写诗、写代码。
    -   **聊天机器人与对话系统**：扮演一个角色进行开放式对话。
    -   **通用问答**：回答关于世界知识的各种问题。
    -   **In-Context Learning**：在 Prompt 中给出少量示例，模型就能模仿示例完成任务，而无需微调。

![GPT (Decoder-Only) Architecture](https://jalammar.github.io/images/f/gpt2-input-output-2.png)
*图片来源: "The Illustrated GPT-2" by Jay Alammar*

### 架构师的决策清单

| 架构类型 | **核心能力** | **信息流** | **典型任务** | **代表模型** | **选型考量** |
| :--- | :--- | :--- | :--- | :--- | :--- |
| **Encoder-Decoder** | 转换 (Transforming) | 双向 -> 单向 | 机器翻译, 文本摘要 | T5, BART | 当输入和输出都是结构化的、但内容需要重新组织的序列时。 |
| **Encoder-Only** | 理解 (Understanding) | 双向 (Bi-directional) | 文本分类, 实体识别 | BERT, RoBERTa | 当你需要对输入文本进行深度分析和分类，而不是生成新文本时。 |
| **Decoder-Only** | 生成 (Generating) | 单向 (Uni-directional) | 开放式生成, 对话, 问答 | GPT, Llama, Mistral | 当你的核心需求是基于提示生成流畅、连贯的文本时。 |

作为一名现代的系统架构师，你可能 90% 的时间都在和 **Decoder-Only** 架构（也就是我们常说的“大语言模型” LLMs）打交道。但理解另外两种架构的存在和优势，能让你的知识体系更完整，在面对特定 NLU 或 Seq2Seq 任务时，能够做出更精准、更高效的技术选型。
