---
title: "10.5 Vibe Coding 实践：构建一个迷你问答机器人"
---

欢迎来到第十章的 Vibe Coding 实践！在本节，你将化身为一名机器学习系统架构师，亲手搭建并优化一个当前最热门的语言智能应用——**检索增强生成 (RAG) 问答机器人**。

**我们的目标：**
- **掌握 RAG 系统的端到端实现**：引导 AI 快速搭建一个完整的 RAG 应用，从文档加载到最终的问答。
- **培养系统调优的“手感”**：亲手调整 RAG 系统的关键参数（如分块策略、提示模板），并直观感受这些调整对系统性能和成本的影响。
- **练习架构师的权衡决策**：在多个技术选项（如嵌入模型的选择）之间，进行有理有据的分析和决策。

### 第〇阶段：准备数据源

**商业场景**：你的公司刚刚发布了新的员工福利政策，包括《2025年健康保险计划》、《年度休假政策》和《差旅与报销标准》。为了帮助员工快速了解这些政策，你需要构建一个智能问答机器人。

**任务**：请在你的项目目录下，手动创建三个简单的文本文件：`policy_health_insurance.txt`, `policy_vacation.txt`, `policy_travel_reimbursement.txt`。

**`policy_health_insurance.txt` 内容示例：**

> **1. 总则**
> 公司为所有全职员工提供全面的健康保险计划，旨在保障员工及其家人的健康。本计划包括医疗、牙科和视力保险三个部分。员工可在入职30天内的新人窗口期选择参与。
>
> **2. 医疗保险**
> 我们提供“基础计划”和“高级计划”两种选择。“基础计划”覆盖日常门诊和住院费用的70%。“高级计划”覆盖比例为90%，并包含每年一次的全面体检服务。计划选择在每年11月的开放注册期进行更改。
>
> **3. 牙科与视力保险**
> 牙科保险涵盖常规洗牙、补牙和根管治疗，年度报销上限为5000元。视力保险涵盖年度验光和配镜费用，眼镜或隐形眼镜的年度报销上限为1500元。
>
> **4. 家属条款**
> 员工的合法配偶及26周岁以下的子女可作为家属加入保险计划。家属需额外支付保费，具体金额根据所选计划和家庭人数确定。

**`policy_vacation.txt` 内容示例：**

> **1. 带薪年假 (Annual Leave)**
> 所有全职员工每年享有15天基础带薪年假。自员工入职的第三年起，工龄每增加一年，年假增加一天，上限为20天。未使用的年假不能折算为现金。
>
> **2. 年假结转政策**
> 在每个日历年结束时，员工当年未使用的年假，最多可有5天自动结转到下一年度。结转的年假需在次年的6月30日前使用完毕，否则将作废。
>
> **3. 病假 (Sick Leave)**
> 员工每年享有10天带薪病假。申请连续超过2天的病假，需提供由合规医疗机构开具的医生证明。
>
> **4. 申请流程**
> 所有假期申请（包括年假和病假）均需通过公司内部的HR系统提交。年假申请应至少提前两周提交，以便于工作安排。

**`policy_travel_reimbursement.txt` 内容示例：**

> **1. 适用范围与总则**
> 本标准适用于所有因公出差的员工。所有报销必须遵循“实报实销、必要且合理”的原则。出差申请需在出发前至少3个工作日获得部门主管批准。
>
> **2. 住宿标准**
> 国内差旅的住宿标准为每晚不超过800元的协议酒店。对于一线城市（北京、上海、广州、深圳），此标准可上浮至1200元。国际差旅标准另行规定。
>
> **3. 交通费标准**
> 城市间交通应优先选择火车或飞机经济舱。如因特殊原因需乘坐商务舱或租车，必须在出差申请中注明理由并获得额外批准。市内交通鼓励使用公共交通或网约车，实报实销。
>
> **4. 餐饮补贴**
> 国内出差的每日餐费及杂费补贴标准统一为150元，包干使用，无需提供发票。

### 第一阶段：AI 快速搭建 RAG 骨架

你的第一个任务，是让 AI 助手使用 `LangChain` 库，快速地将 RAG 系统的基本骨架搭建起来。

> **提示 (Prompt):**
>
> “你好，我需要构建一个公司内部政策的问答机器人。数据源是我本地的三个文本文件：`policy_health_insurance.txt`, `policy_vacation.txt`, `policy_travel_reimbursement.txt`。
>
> 请使用 **LangChain** 库帮我完成以下任务：
>
> 1.  **文档加载**：加载这三个文本文件。
> 2.  **文本分割**：使用 `RecursiveCharacterTextSplitter` 将加载的文档进行分割，`chunk_size` 设为 300，`chunk_overlap` 设为 30。
> 3.  **嵌入与存储**：
>     -   使用一个**开源的、可在本地运行的嵌入模型**（例如，`sentence-transformers/all-MiniLM-L6-v2`，通过 `HuggingFaceEmbeddings` 加载）。
>     -   使用内存中的 **FAISS** 作为向量数据库，将分割后的文档块进行嵌入和存储。
> 4.  **创建 RAG 链**：
>     -   从向量数据库创建一个**检索器 (Retriever)**。
>     -   定义一个 Prompt 模板，用于将上下文和问题结合起来。
>     -   使用一个你能够访问的 LLM（例如 DeepSeek 的 `deepseek-chat`，如果已配置好 API Key 的话）。
>     -   将上述组件链接成一个完整的 RAG 链。
> 5.  **测试**：最后，调用这个 RAG 链，测试一下问题：“我的年假有多少天？”
>
> 请提供完整的、可执行的 Python 代码。”

*架构师的思考：这个 Prompt 清晰地定义了 RAG 的每一个环节和所使用的具体工具，AI 可以基于此快速生成一个可工作的原型。我们特意选择了本地嵌入模型和内存数据库，以降低初次实验的复杂度和成本。*


### 第二阶段：人类优化检索与生成

AI 已经帮你搭建好了骨架。现在，轮到你这位架构师对这个原型进行压力测试，发现其弱点，并指导 AI 进行优化。

#### **引导性问题与优化任务**

1.  **分块策略的挑战**
    > **问 AI**：“我去年剩下的年假，最晚什么时候必须用完？”
    
    *架构师的思考：这个问题横跨了《年度休假政策》中的两个独立的知识点（“最多可有5天自动结转”和“需在次年的6月30日前使用完毕”）。如果你的 `chunk_size` 设置得太小或不合理，这两个相关的句子可能会被切分到不同的文档块中，导致检索器一次只能找回其中一个，从而让 LLM 给出不完整的、甚至是错误的答案。*
    
    > **优化提示 (Prompt):**
    > “我发现刚才的回答不完整。请帮我调整 `RecursiveCharacterTextSplitter` 的参数，将 `chunk_size` 增加到 500，`chunk_overlap` 增加到 50，然后重新运行整个流程，再回答一次同样的问题，看看效果是否有所改善。”

2.  **嵌入模型选择的权衡 (架构师思考)**
    *这个问题不需要你实际操作，但需要在脑中进行推演。*
    
    *我们现在使用的是一个轻量级的、开源的嵌入模型。它的优点是免费、快速。但如果我们的文档非常专业，包含了大量行业黑话和细微的语义差别，这个模型的理解能力可能会不足，导致检索回来的文档不够精准。*
    
    *思考：如果我们换用 OpenAI 的 `text-embedding-3-large` 这样的顶级闭源模型，你认为：*
    -   *对**检索效果**会有什么潜在的正面影响？*
    -   *对**系统成本**会产生什么变化（嵌入每个文档块都需要 API 调用）？*
    -   *在什么情况下，我们应该优先考虑使用成本更高的闭源嵌入模型？*

3.  **生成质量的控制 (对抗“幻觉”)**
    > **问 AI**：“我们公司的健身房补贴政策是什么？”
    
    *架构师的思考：我们的知识库中根本没有关于“健身房补贴”的任何信息。一个没有经过良好提示工程的 RAG 系统，此时 LLM 可能会开始“一本正经地胡说八道”，即产生**幻觉 (Hallucination)**，编造一个看似合理的答案。这对企业应用来说是灾难性的。*
    
    > **优化提示 (Prompt):**
    > “我发现对于知识库里没有的问题，模型会自己编造答案。这很危险。请帮我修改 RAG 链中的 **Prompt 模板**，加入明确的指令来约束模型的行为。新的模板应该包含类似这样的规则：‘**请仅根据下面提供的上下文来回答问题。如果上下文中没有足够的信息来回答问题，请直接回复【我不知道，我的知识库中没有相关信息。】**’ 然后再测试一次同样的问题。”

4.  **成本与性能的平衡 (Top-K)**
    *架构师的思考：默认情况下，检索器可能只返回最相关的几个文档块（例如，Top-K=4）。如果一个复杂问题需要结合 5 个文档块的信息才能完整回答，默认设置就会导致信息缺失。但如果我们将 K 设得太大（例如 K=10），不仅会大大增加传给 LLM 的文本长度，导致 API 成本飙升，还可能因为信息过多而干扰模型的判断。*
    
    *思考：在你的 RAG 系统中，如何找到一个既能保证回答质量，又能控制成本的最佳 Top-K 值？你认为可以通过什么实验方法来确定它？*

通过以上实践，你将深刻地体会到，一个成功的 RAG 系统，远不止是调用 API 那么简单。它是一系列在成本、延迟、准确性之间不断权衡的工程决策与艺术。
