---
title: "10.2 语义几何：词嵌入 (Word Embeddings)"
---

上一节我们确立了一个核心思想：要让机器理解语言，就必须将语言“几何化”。**词嵌入 (Word Embeddings)** 正是实现这一目标的关键技术。它是一种将词语从其原始的、孤立的符号形式，转换为一个包含丰富语义信息的、稠密的**向量 (Vector)** 表示的方法。

### 核心思想：“物以类聚，词以群分”

词嵌入技术的哲学根基，可以追溯到语言学家 John Rupert Firth 在 1957 年提出的著名观点：“**You shall know a word by the company it keeps.**”（观其伴，知其义）。

这句话的直觉非常简单：经常出现在相似上下文语境中的词语，它们的意义也更相近。

-   “小狗”、“小猫”、“宠物”这些词，经常和“可爱”、“喂养”、“玩耍”等词一起出现。
-   “汽车”、“火车”、“飞机”这些词，经常和“交通”、“速度”、“旅行”等词一起出现。

像 **Word2Vec**, **GloVe** 等经典的词嵌入算法，正是基于这个思想。它们通过训练一个简单的神经网络，让模型去“阅读”海量的文本（例如，整个维基百科）。模型的目标不是翻译或者回答问题，而是一个非常巧妙的代理任务：

-   **CBOW (Continuous Bag-of-Words)** 模型：通过上下文的词语，来**预测中心词**。
-   **Skip-gram** 模型：通过中心词，来**预测其上下文的词语**。

在完成这个预测任务的过程中，模型为了最小化预测误差，会不断调整其内部参数。而这些参数，最终就形成了我们想要的——每个词的**词向量 (Word Vector)**。

这个训练过程的副产品——词向量，神奇地捕捉到了词语之间的语义关系。

### 语义的几何类比

一旦每个词都有了一个向量表示，我们就可以在向量空间中进行数学运算，这些运算的结果往往对应着现实世界中的语义关系。

最著名的例子莫过于：
$$
\text{vector('King')} - \text{vector('Man')} + \text{vector('Woman')} \approx \text{vector('Queen')}
$$
这个公式直观地展示了嵌入空间的神奇之处：

-   `vector('King') - vector('Man')` 这个运算，可以被理解为从“国王”这个概念中，剥离掉“男性”这个属性，留下了关于“皇权”、“统治”等核心语义的向量方向。
-   再加上 `vector('Woman')`，就相当于为这个“皇权”概念，注入了“女性”的属性。
-   最终得到的向量，在空间中离 `vector('Queen')` 的位置非常近。

这表明，词嵌入不仅学到了词语的“意义”，还学到了这些意义之间的**线性结构**。国家与首都、动词的不同时态等多种关系，都可以在这个空间中被表示为特定的向量方向。

### 互动演示：探索词语的几何空间

下面的三维交互式动画，展示了一部分词语在经过 GloVe 模型训练后，在向量空间中的位置分布（使用 PCA 降维到三维以便于可视化）。

-   **拖动鼠标**：可以旋转整个词语空间。
-   **滚动滚轮**：可以缩放视图。
-   **悬停在点上**：可以查看该点对应的具体词语。

<iframe src="../assets/ch10/word_embedding_space.html" width="100%" height="600" frameborder="0"></iframe>

**请与上图互动，并观察：**

1.  **语义的聚集**：找到 "cat"（猫），你会发现 "dog"（狗）、"horse"（马）等动物离它很近。找到 "red"（红色），你会发现 "blue"（蓝色）、"green"（绿色）等颜色离它很近。这证明了词嵌入确实捕捉到了“物以类聚”的特性。
2.  **概念的关联**：找到 "work"（工作），你会发现 "business"（商业）、"company"（公司）、"job"（工作）等词汇构成了一个相关的簇。
3.  **抽象的关系**：找到数字 "one", "two", "three"，你会发现它们在空间中也聚集在一起。

通过词嵌入，我们成功地将离散的符号世界，转化为了一个连续的、充满几何关系的语义空间。这为我们后续构建更复杂的语言模型（如 RAG、Transformer）奠定了最坚实的基础。
