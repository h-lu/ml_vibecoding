---
title: "14.5 Vibe Coding 实践：驾驭 AI 的创造力旋钮"
---

在 14.4 节，我们学习了自回归模型如何像一位作家一样，逐字逐句地构建文本。我们还了解了决定这位“作家”风格的关键——**解码策略 (Decoding Strategies)**。现在，让我们亲手实践，从一个机器学习系统架构师的视角，去“调试”和“驾驭”一个大型模型的创造力。

**任务目标**：利用 `Qwen/Qwen3-0.6B` 模型，探索不同的解码策略（特别是 `temperature` 和 `top_p` 参数）如何深刻地影响创意文本的生成质量。你将学会如何通过调节这些“创造力旋钮”，来平衡模型的“逻辑性”与“想象力”。

---

### 第一阶段：AI 实现一个可控的生成器 (Vibe Check)

作为架构师，我们首先需要一个能够让我们方便地调节生成参数的基础系统。

::: {.callout-important title="Vibe Coding 提示"}
**向你的 AI 助手发出指令：**

> 使用 Hugging Face `transformers` 库，帮我编写一个可调节的文本生成 Python 脚本。
>
> 1.  **模型与分词器**：加载 `"Qwen/Qwen3-0.6B"` 模型和分词器，使用 `torch_dtype="bfloat16"` 并部署到 "cuda" (如果可用)。
> 2.  **可配置的生成函数**：编写一个名为 `generate_creative_text` 的函数，它应该接收以下参数：
>     *   `prompt` (string): 输入的提示词。
>     *   `temperature` (float): 温度参数。
>     *   `top_p` (float): 核采样参数。
>     *   `max_new_tokens` (int, 默认为 150)。
> 3.  **函数实现**：在函数内部，使用 `tokenizer.apply_chat_template` 格式化输入，然后调用 `model.generate` 方法。**关键**：将函数的 `temperature` 和 `top_p` 参数传递给 `generate` 方法，并确保设置 `do_sample=True` 来激活采样。
> 4.  **调用示例**：在脚本末尾，提供调用该函数的示例代码，以便我可以直接运行和修改。
:::

AI 助手应该会为你生成一个简洁而强大的脚本，它将成为你探索模型创造力边界的实验平台。

---

### 第二阶段：架构师的参数调试艺术 (Architect's Arena)

AI 搭建了实验平台，现在轮到你这位架构师来指挥实验了。你将通过系统性的对比实验，亲身感受解码策略的魔力。

**核心任务**：使用 `prompt = "写一首关于深夜的城市和孤独的程序员的短诗。"`，对比以下三种参数设置生成的诗歌，并分析其风格差异。

#### 实验 1：保守的逻辑派 (Low Temperature)

这种设置下，模型会更倾向于选择高概率的、更“安全”的词汇，生成的文本通常更连贯、更符合逻辑，但可能缺乏惊喜。

-   **你的任务**：调用你的生成函数，设置 `temperature=0.2`, `top_p=0.9`。
-   **观察与记录**：生成的诗歌是什么风格？它是否结构清晰，用词常见？是否感觉有些“平淡”？

#### 实验 2：激进的梦想家 (High Temperature)

调高温度，模型会开始考虑一些低概率的词汇，这会极大增加文本的随机性和创造性，但有时也可能导致逻辑不通或产生奇怪的组合。

-   **你的任务**：调用你的生成函数，设置 `temperature=0.9`, `top_p=0.9`。
-   **观察与记录**：与实验 1 相比，这首诗有何不同？是否出现了更有趣、更意想不到的意象和词汇？它是否仍然保持了基本的连贯性？

#### 实验 3：受约束的创新者 (Low top_p)

`top_p`（核采样）是另一种控制随机性的方法。它将词汇表限制在一个累积概率的核心集合内。较低的 `top_p` 会排除掉更多“长尾”词汇，让模型的选择范围变小，但又不像低温那样完全压制创造力。

-   **你的任务**：调用你的生成函数，设置 `temperature=0.8`, `top_p=0.5`。
-   **观察与记录**：这次的生成结果与前两次有何区别？它是否在“天马行空”和“墨守成规”之间找到了一个有趣的平衡点？

---

### 第三阶段：撰写架构师分析报告

完成以上对比实验后，请撰写一份简短的分析报告。

1.  **并列展示**：将三次实验生成的诗歌并列展示，方便对比。
2.  **风格分析**：用你自己的话描述三种参数设置下，模型生成文本的风格差异。
3.  **架构师的权衡**：
    *   如果你在为一个需要生成**产品描述**（要求准确、清晰）的系统选择参数，你会倾向于哪种设置？为什么？
    *   如果你在为一个**游戏 NPC 对话生成器**（要求有趣、多变）选择参数，你又会如何选择？
    *   `temperature` 和 `top_p` 这两个参数似乎都能控制随机性，通过实验和思考，你认为它们之间的主要区别是什么？

这个实践让你直接触及了生成式 AI 的“灵魂”——概率分布和采样策略。掌握如何通过调整这些参数来驾驭模型，是机器学习系统架构师在实际应用中创造价值的关键技能。
